{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-05-24-代码质量好坏如何评判/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"07f5bf5b-b071-5003-86a9-d98960460254","excerpt":"…","html":"<h1>代码质量好坏如何评判？</h1>\n<h2>代码质量”好”和”坏”指什么？</h2>\n<p>“好”可以表示代码的质量高，“坏”表示代码的质量低。</p>\n<h2>代码质量”高”又是指什么？</h2>\n<p>代码质量高指代码：可维护性、可读性、可扩展性、灵活性、简洁性、可复用、可测试性。其中<strong>可维护性、可读性、可扩展性</strong>是最重要的三个指标。</p>\n<h3>可维护性</h3>\n<p>可维护性是一个主观性很强的评判标准，因为熟悉系统的资深工程师可能会任务易维护，但是资历浅的工程师就会认为难维护。</p>\n<ul>\n<li>所谓可维护性就是指，在不破坏原有代码设计、不引入新的<code class=\"language-text\">BUG</code>的情况下，能够快速地修改或者添加代码。</li>\n<li>所谓代码不易维护就是值，修改或者添加代码需要冒着极大的引入新<code class=\"language-text\">bug</code>的风险，并且需要花费很长的时间才能完成。</li>\n</ul>\n<h3>可读性</h3>\n<p>代码的可读性从如下几个方面来进行评价。</p>\n<ul>\n<li>是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等。</li>\n</ul>\n<p>但是最简单的评价标准就是让同事来做<code class=\"language-text\">Code Receive</code>,如果同事能够轻松的读懂你的代码，那就是可读性很好，反之就是需要改善代码了。</p>\n<h3>可扩展性</h3>\n<ul>\n<li>可扩展性表示，我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。</li>\n</ul>\n<h3>灵活性</h3>\n<p>代码灵活性主要提现在易扩展方面。</p>\n<h3>简洁性</h3>\n<p>我们要遵从<code class=\"language-text\">KISS</code>原则，代码要尽可能的简单；但是<strong>思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。这也是一个编程老手跟编程新手的本质区别之一。</strong></p>\n<h3>可复用性</h3>\n<ul>\n<li>可复用性是很多设计模式、思想、原则所要达到的最终效果。</li>\n</ul>\n<h3>可测试性</h3>\n<ul>\n<li>可测试就能从侧面上非常准确地反应代码质量的好坏。</li>\n</ul>\n<p>要写出满足上述评价标准的高质量代码，我们需要掌握一些更加细化、更加能落地的编程方法论，包括面向对象设计思想、设计原则、设计模式、编码规范、重构技巧等。</p>\n<p>如：</p>\n<ul>\n<li>面向对象中的继承、多态能让我们写出可复用的代码；</li>\n<li>编码规范能让我们写出可读性好的代码。</li>\n<li>设计原则中的单一职责、DRY、基于接口而非实现、里氏替换原则等可以写出易复用、灵活、可读性好、易扩展、易维护的代码；</li>\n<li>设计模式可以写出易扩展的代码。</li>\n<li>持续重构可以时刻保持代码的可维护性。</li>\n</ul>","frontmatter":{"title":"代码质量好坏如何评判","date":"May 24, 2021","description":"好可以表示代码的质量高，坏表示代码的质量低。"}},"previous":{"fields":{"slug":"/2021-05-21-技术写作-第一节/"},"frontmatter":{"title":"技术写作 第一课"}},"next":{"fields":{"slug":"/2021-05-25-技术写作/"},"frontmatter":{"title":"技术写作 第二课"}}},"pageContext":{"id":"07f5bf5b-b071-5003-86a9-d98960460254","previousPostId":"e0fe36ec-234b-5407-b8f7-a1a29a553f52","nextPostId":"6855efca-8a34-5f89-a39a-2eaa25738cfa"}},
    "staticQueryHashes": ["2841359383","3257411868"]}