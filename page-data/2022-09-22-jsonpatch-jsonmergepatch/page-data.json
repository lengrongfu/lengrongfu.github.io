{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-09-22-jsonpatch-jsonmergepatch/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"a0254efe-b1cb-51d2-8215-2094afa96806","excerpt":"JSON Patch and JSON Merge Patch  作为  的一种 , 近年来受到较多的关注，于是便提出关于使用  驱动  格式的想法，这种格式用声明式的形式来描述两个文档之间的差异，发布了两种格式来解决这个问题： RFC 6902 (JSON Patch)和 RFC 7396 (JSON Merge…","html":"<h1>JSON Patch and JSON Merge Patch</h1>\n<p><code class=\"language-text\">PATCH</code> 作为 <code class=\"language-text\">HTTP</code> 的一种 <code class=\"language-text\">Method</code>, 近年来受到较多的关注，于是便提出关于使用 <code class=\"language-text\">JSON</code> 驱动 <code class=\"language-text\">PATCH</code> 格式的想法，这种格式用声明式的形式来描述两个<code class=\"language-text\">JSON</code>文档之间的差异，<code class=\"language-text\">IETF</code>发布了两种格式来解决这个问题： <a href=\"https://tools.ietf.org/html/rfc6902\">RFC 6902 (JSON Patch)</a>和 <a href=\"https://www.rfc-editor.org/rfc/rfc7396\">RFC 7396 (JSON Merge Patch)</a>，两者各有优缺点，没有一种是可以适用于任何人的，让我们来看下他们的区别。</p>\n<h2>JSON PATCH</h2>\n<p><code class=\"language-text\">JSON PATCH</code> 的格式类似于数据库事物，它是一个 <code class=\"language-text\">JSON Document,</code>它基本上是由<code class=\"language-text\">ADD</code>、<code class=\"language-text\">REMOVE</code>、<code class=\"language-text\">REPLACE</code>、<code class=\"language-text\">MOVE</code>、<code class=\"language-text\">COPY</code> 一系列操作组成的。</p>\n<p>下面一个简单的示例描述了一个 <code class=\"language-text\">JSON</code> 的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"users\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"alice@example.org\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"bob@example.org\"</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个 <code class=\"language-text\">JSON</code>中执行<code class=\"language-text\">JSON PATCH</code>操作，更改<code class=\"language-text\">Alice</code>的电子邮件，并且添加一个新的<code class=\"language-text\">user</code>到数组中：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"op\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"replace\"</span> <span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"path\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/users/0/email\"</span> <span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"value\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"alice@wonderland.org\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"op\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"path\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/users/-\"</span> <span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"value\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Christine\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"christine@example.org\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>它的结果将是：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"users\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"alice@wonderland.org\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"bob@example.org\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Christine\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"christine@example.org\"</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>一个<code class=\"language-text\">JSON PATCH</code> 有以下几个基本元素描述而成：</p>\n<ul>\n<li><code class=\"language-text\">op </code>健表示操作类型。</li>\n<li>操作的参数由其他元素描述。</li>\n<li><code class=\"language-text\">path</code>是指向作为操作目标的<code class=\"language-text\">JSON</code>中的指针，是一个必须存在的参数。</li>\n</ul>\n<p><code class=\"language-text\">JSON PATCH</code> 操作提供了一个 <code class=\"language-text\">test</code> 操作类型，它没有任何坏处，所以它不是一个数据操作运算符，它可以用来对执行过程进行断言，如果<code class=\"language-text\">test</code>评估结果为<code class=\"language-text\">false</code>,则可以中断执行。</p>\n<h2>JSON MERGE PATCH</h2>\n<p><code class=\"language-text\">JSON MERGE PATCH</code> 它描述了 <code class=\"language-text\">json document</code>的更改版本，与<code class=\"language-text\">JSON PATCH</code> 类似，区别在于它类似<code class=\"language-text\">diff</code>文件，只包含执行后应该不同的<code class=\"language-text\">document</code>节点。</p>\n<p>如下是一个简单的<code class=\"language-text\">JSON</code>文档，来说明<code class=\"language-text\">JSON MERGE PATCH</code>的格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"c\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"f\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以在上述的<code class=\"language-text\">JSON</code>中运行如下的<code class=\"language-text\">MERGE PATCH</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"c\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"f\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个将 <code class=\"language-text\">a</code> 的值改为 <code class=\"language-text\">z</code> ,并且将删除 <code class=\"language-text\">c</code>。</p>\n<p>它看着很简单，但是这种简单性也带来了限制：</p>\n<ul>\n<li>通过将<code class=\"language-text\">key</code>的值设置为<code class=\"language-text\">null</code>来进行删除，这本质上就导致用户不能主动设置<code class=\"language-text\">null</code>值。</li>\n<li>数组不能被<code class=\"language-text\">PATCH</code>操作，如果想将一个元素添加到数组中，或者改变它的任何元素，那么必须要提供一个完整的数据才能执行。</li>\n<li><code class=\"language-text\">MERGE PATCH</code>操作永远不会导致错误，任何格式错误的补丁都会被<code class=\"language-text\">PATCH</code>,所以它是一种自由的格式，这不一定是好的，因为我们可能需要在执行完<code class=\"language-text\">MEGER PATCH</code> 之后进行<code class=\"language-text\">JSON SCHEMA</code>的验证，错误就撤销<code class=\"language-text\">PATCH</code>，但是目前实现不了。</li>\n</ul>\n<h2>总结</h2>\n<p><code class=\"language-text\">JOSN MERGE PATCH</code> 是一种非常简单的格式，可用性有限，对于更复杂的用户，请使用<code class=\"language-text\">JSON PATCH</code>,由于它使用与任何<code class=\"language-text\">JSON</code>文档，该规范还提供了原子执行和执行前后执行<code class=\"language-text\">test</code>检查。</p>\n<p><code class=\"language-text\">Kubernetes</code> 的 <code class=\"language-text\">PATCH</code>是支持<code class=\"language-text\">JSON MERGER PATCH</code> 和 <code class=\"language-text\">MERGE PATCH</code>的，但是使用<code class=\"language-text\">JSON MERGE PATCH</code>的场景较少，也是建议使用<code class=\"language-text\">JSON PATCH</code>，最根本原因就是<code class=\"language-text\">JSON MERGE PATCH</code>的协议格式过于简单，难以应用在复杂场景。</p>","frontmatter":{"title":"JSON Patch and JSON Merge Patch","date":"September 22, 2022","description":null}},"previous":{"fields":{"slug":"/2022-08-31-remote-golang-developer-env/"},"frontmatter":{"title":"Vscode Remote Golang开发环境打造"}},"next":null},"pageContext":{"id":"a0254efe-b1cb-51d2-8215-2094afa96806","previousPostId":"c937dc70-8f22-52b1-8635-3f254ea1056c","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}