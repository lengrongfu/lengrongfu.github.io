{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-05-12-文章全平台发布/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"0834517d-2504-52d9-b23c-9c757272c267","excerpt":"这篇文章主要是记录如何构建一个可以把文章发布到各平台的环境。 平台 之所以把文章发布到多平台有如下几点原因： 扩大阅读的受众，让各个平台的用户都能共同学习，变得更好。 防止文章被其它平台的用户复制、盗版。 扩大个人的影响力。 文章发布的平台我选择了如下几个： 自己的博客主页: LRF成长记 知乎：leng…","html":"<p>这篇文章主要是记录如何构建一个可以把文章发布到各平台的环境。</p>\n<h3>平台</h3>\n<p>之所以把文章发布到多平台有如下几点原因：</p>\n<ul>\n<li>扩大阅读的受众，让各个平台的用户都能共同学习，变得更好。</li>\n<li>防止文章被其它平台的用户复制、盗版。</li>\n<li>扩大个人的影响力。</li>\n</ul>\n<p>文章发布的平台我选择了如下几个：</p>\n<ul>\n<li>自己的博客主页: <a href=\"https://lengrongfu.github.io/\">LRF成长记</a></li>\n<li>知乎：<a href=\"https://www.zhihu.com/people/leng-77-26\">leng</a></li>\n<li>简书: <a href=\"https://www.jianshu.com/u/1ef6ada5fbb4\">LRF成长记</a></li>\n<li>掘金: <a href=\"https://juejin.cn/user/289926802576647/posts\">LRF成长记</a></li>\n<li>SegmentFault：<a href=\"https://segmentfault.com/u/lengrongfu/articles\">LRF成长记</a></li>\n<li>微信公众号：<strong>菜鸟随笔</strong></li>\n</ul>\n<h3>写文章</h3>\n<p>上述平台几乎都支持发布<code class=\"language-text\">Markdown</code>文件，除了微信公众号除外，后面我会讲到怎么用工具把<code class=\"language-text\">Markdown</code>直接转换为微信公众号可接受的内容。</p>\n<h4>1、图片</h4>\n<p>在写文档的过程中总会有需要用到图片，因此我们需要一个可以方便上传图片的工具，这里我们选用<code class=\"language-text\">PicGo</code>。</p>\n<p><code class=\"language-text\">PicGo</code>能快速上传图片并获取上传后的<code class=\"language-text\">url</code>，且兼容多平台。而且图片可以选择上传到多个平台：七牛、腾讯云、又拍云、<code class=\"language-text\">github</code>、阿里云、<code class=\"language-text\">gitee</code>等等，并且可以和<code class=\"language-text\">typora</code>无缝集成，<code class=\"language-text\">typora</code>是用来写<code class=\"language-text\">Markdown</code>的工具，稍后再来讲解。</p>\n<p>此处我选用<code class=\"language-text\">Github</code>作为我的图片存储，之所以没有选择<code class=\"language-text\">gitee</code>，是因为<code class=\"language-text\">gitee</code>有文件<code class=\"language-text\">1M</code>的限制，如果文件大于<code class=\"language-text\">1M</code>就不能创建外链了。</p>\n<h5>(1)下载PicGo</h5>\n<p><code class=\"language-text\">PicGo</code>的<code class=\"language-text\">Github</code>地址：<a href=\"https://github.com/Molunerfinn/\">https://github.com/Molunerfinn/</a></p>\n<h5>(2) 配置</h5>\n<p>点击<code class=\"language-text\">PicGo</code>的<strong>打开详细窗口</strong>，进行图床配置，此处配置为<code class=\"language-text\">Github</code>，需要设置仓库名：<code class=\"language-text\">lengrongfu/images</code>,分支：<code class=\"language-text\">master</code>，以及<code class=\"language-text\">Token</code>三个必要参数。</p>\n<h5>(3)验证</h5>\n<p>配置好之后可以上传一张图片进行测试。</p>\n<h4>2、写文档</h4>\n<p>写文章我们采用<code class=\"language-text\">Typora</code>工具，<code class=\"language-text\">Typora</code> 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有<code class=\"language-text\"> OS X</code>、<code class=\"language-text\">Windows</code>、<code class=\"language-text\">Linux </code>三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的，好用就对了。</p>\n<h5>(1)Typora下载安装</h5>\n<p><code class=\"language-text\">Typora</code>的官方地址：<a href=\"https://www.typora.io/\">Typora</a></p>\n<h5>(2)配置PicGo</h5>\n<p>配置<code class=\"language-text\">PicGo</code>，这样就可以直接从<code class=\"language-text\">Typora</code>中触发图片的上传了。设置方式(<code class=\"language-text\">Typora</code>->偏好设置->图像)</p>\n<h4>3、任务排期</h4>\n<p>写文章和做项目一样，要把重要的时间拿来写复杂、重要的内容，因此最好对要写的东西做一个任务排期，什么时候做什么，这样会好很多。</p>\n<p>此处推荐使用<strong>trello</strong>,<a href=\"https://trello.com/\">https://trello.com/</a></p>\n<h4>4、代码图片</h4>\n<p>有些网站不支持代码格式，所以可以把代码转换为图片，可以使用现有的网站实现这个功能：<a href=\"https://carbon.now.sh/\">https://carbon.now.sh/</a></p>\n<p>如果代码是在<code class=\"language-text\">IDEA</code>或者<code class=\"language-text\">VSCode</code>中也可以直接使用，通过安装<code class=\"language-text\">carbon</code>的插件即可。</p>\n<h3>发布</h3>\n<p>这里主要记录把文章发布到各个平台的方式，此处推荐两种方式:</p>\n<ul>\n<li><code class=\"language-text\">openwrite</code>，一个收费产品，可以做到发布到上诉的所有平台，以及微信公众号。免费每个月可以发布<code class=\"language-text\">10</code>次，收费是<code class=\"language-text\">199</code>一年。</li>\n<li><code class=\"language-text\">bloghelper</code>，一个<a href=\"https://github.com/onblog/BlogHelper\">开源产品</a>，好处就是免费，并且可以自己添加公共，目前它只支持发布到上述的博客平台，不能发送到微信公众号。此处我主要是用这个工具来发布，后面我会扩展它使其可以发布到微信公众号。</li>\n</ul>\n<h5>发布到公众号</h5>\n<p>由于文章采用 <strong>markdown</strong> 写作，而微信公众号编辑器不支持渲染 <strong>markdown</strong>，这就导致我们需要自己排版。可以使用自动排版 <strong>markdown</strong> 的网站，里面支持样式也是比较简洁好看。</p>\n<ul>\n<li><a href=\"http://md.aclickall.com/\">http://md.aclickall.com/</a></li>\n<li><a href=\"https://mdnice.com/\">https://mdnice.com/</a> (这个项目目前要开始收费)</li>\n</ul>\n<p>上面这些工具更多的是只能从页面把<code class=\"language-text\">Markdown</code>转换为微信公众号文章，我们可以通过代码的方式，使其转换、发布做到自动化，并最后集成到<code class=\"language-text\">bloghelper</code>中去。</p>\n<ul>\n<li>转换</li>\n</ul>\n<p>此处借用一个开源项目<a href=\"https://github.com/LinusLing/wechat-format-cli\"><code class=\"language-text\">wechat-format-cli</code></a>，可以做到使用命令行来转换<code class=\"language-text\">Markdown</code>到公众号的文章去。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 安装工具</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> wechat-format-cli -g\n<span class=\"token comment\"># 执行转换命令</span>\n$ wechat-format-cli <span class=\"token punctuation\">[</span>your_md_path.md<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>发布</li>\n</ul>\n<p>上述的工具把文档转换好之后，我们再使用一款自动预览/发布文章的命令行工具，也是一个开源项目<a href=\"https://github.com/LinusLing/WeChatMediaPlatformAutomation\"><code class=\"language-text\">wechat-mp-automation</code></a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 安装</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> wechat-mp-automation -g\n$ wechat-mp-automation -h\nUsage: wechat-mp-automation <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span>\n\nOptions:\n  -V, --version                 output the version number\n  -C, --configPath <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>        配置文件的本地路径（支持所有自定义参数）\n  -t, --title <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>             文章标题\n  -a, --author <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>            文章作者\n  -c, --content <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>           文章内容<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>，默认从粘贴板复制\n  -u, --username <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>          公众号账号\n  -p, --password <span class=\"token punctuation\">[</span>xxx<span class=\"token punctuation\">]</span>          公众号密码\n  -o, --original                声明原创<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>\n  --preview                     预览而不发布<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>\n  --preview_username <span class=\"token punctuation\">[</span>xxx~yyy<span class=\"token punctuation\">]</span>  预览名单<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>，以~间隔多个微信号（自行保证微信号已关注公众号）\n  --skip_typing                 跳过文章标题、作者、文章的填写和封面图片选择（声明原创除外）<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>\n  --last_edit                   选中最近编辑的文章<span class=\"token punctuation\">[</span>可选<span class=\"token punctuation\">]</span>，请自行确保当前有“最近编辑”的文章\n  -h, --help                    output usage information\n  \n<span class=\"token comment\"># 只预览</span>\n$ wechat-mp-automation -C YOUR_CONFIG_JSON_FILE_PATH --preview_username XXXXX --preview\n<span class=\"token comment\"># 发布</span>\n$ wechat-mp-automation -t <span class=\"token punctuation\">[</span>标题<span class=\"token punctuation\">]</span> -a <span class=\"token punctuation\">[</span>作者<span class=\"token punctuation\">]</span> -u <span class=\"token punctuation\">[</span>账号<span class=\"token punctuation\">]</span> -p <span class=\"token punctuation\">[</span>密码<span class=\"token punctuation\">]</span> -o\n<span class=\"token comment\"># 配合wechat-format-cli工具可做到自动转换和发布</span>\n$ wechat-format-cli test.md <span class=\"token operator\">&amp;&amp;</span> wechat-mp-automation -t <span class=\"token punctuation\">[</span>标题<span class=\"token punctuation\">]</span> -a <span class=\"token punctuation\">[</span>作者<span class=\"token punctuation\">]</span> -u <span class=\"token punctuation\">[</span>账号<span class=\"token punctuation\">]</span> -p <span class=\"token punctuation\">[</span>密码<span class=\"token punctuation\">]</span> -o</code></pre></div>\n<h3>全平台发布流程</h3>\n<p>下图我定义了全平台发布流程，把图床、发布工具设置好之后，用户只需要在<code class=\"language-text\">Typora</code>上进行编写<code class=\"language-text\">Markdown</code>格式的内容即可，编写完之后就可以全平台的发布了。</p>\n<p><img src=\"https://raw.githubusercontent.com/lengrongfu/images/master/imgblog-flow.png\" alt=\"blog-flow\"></p>\n<h3>我的流程</h3>\n<p>在使用过程中发现一个好的<code class=\"language-text\">Chrome</code>插件<a href=\"https://github.com/lengrongfu/Wechatsync\">Wechatsync</a> ，可以在发微信文章的时候自动把内容容不到其它平台上去。</p>","frontmatter":{"title":"文章全平台发布","date":"May 12, 2021","description":"这篇文章主要是记录如何构建一个可以把文章发布到各平台的环境。"}},"previous":{"fields":{"slug":"/2019-10-20-intellij-idea激活/"},"frontmatter":{"title":"intellij-idea激活"}},"next":{"fields":{"slug":"/2021-05-13-Kubernetes-Network/"},"frontmatter":{"title":"Kubernetes Network"}}},"pageContext":{"id":"0834517d-2504-52d9-b23c-9c757272c267","previousPostId":"ac0336f7-fc01-5ed5-8a44-06419b9f6ac6","nextPostId":"4fb2782a-4ae1-5840-855f-812b9b344a1e"}},
    "staticQueryHashes": ["2841359383","3257411868"]}