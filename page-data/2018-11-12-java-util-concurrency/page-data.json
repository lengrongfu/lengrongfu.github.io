{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2018-11-12-java-util-concurrency/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"59f8103c-1218-59b4-8f12-b42f9e8f26b4","excerpt":"本文主要学习java包中的并发工具学习。 BlockingQueue…","html":"<blockquote>\n<p>本文主要学习java包中的并发工具学习。</p>\n</blockquote>\n<h1>BlockingQueue</h1>\n<p><code class=\"language-text\">java.util.concurrent</code>包中的阻塞队列接口<code class=\"language-text\">BlockingQueue</code>表示一个线程是可以安全放入实例，并且其他线程可以从中获取。\n一个阻塞队列一般是一个线程生产，一个线程消费，</p>\n<p><img src=\"blocking-queue.png\" alt=\"阻塞队列原理图\"></p>\n<p>当队列到达最大限制，生产数据的线程将会被阻塞，直到消费者从队列中取出一个元素。\n当一个消费者尝试从一个空队列中获取元素时，会被阻塞。</p>\n<h2>BlockingQueue 方法</h2>\n<p>一个<code class=\"language-text\">BlockingQueue</code>有四种不同的方法插入、删除、检查队列中的元素，每一组方法的功能都不太一样，如下是一个方法表。</p>\n<table>\n<thead>\n<tr>\n<th>—</th>\n<th>Throws Exception</th>\n<th>Special Value</th>\n<th>Blocks</th>\n<th>Times Out</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>add(o)</td>\n<td>offer(o)</td>\n<td>put(o)</td>\n<td>offer(o, timeout, timeunit)</td>\n</tr>\n<tr>\n<td>Remove</td>\n<td>remove(o)</td>\n<td>poll()</td>\n<td>take()</td>\n<td>poll(timeout, timeunit)</td>\n</tr>\n<tr>\n<td>Examine</td>\n<td>element()</td>\n<td>peek()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>这四种不同的操作有不同的功能\n1、Throws Exception\n如果不能立即执行这个操作，就会抛出异常，比如，如果队列已满，再往里面插入就会抛出异常，或者队列中没有元素，那么一个线程从队列中取元素就会抛出异常。\n2、</p>","frontmatter":{"title":"java.util.concurrency 包","date":"November 12, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-01-java-concurrency/"},"frontmatter":{"title":"java并发和多线程学习"}},"next":{"fields":{"slug":"/2018-11-13-docker-network-beginner/"},"frontmatter":{"title":"docker network 入门"}}},"pageContext":{"id":"59f8103c-1218-59b4-8f12-b42f9e8f26b4","previousPostId":"691f7c96-a870-5b63-bbe4-860760d3c8a3","nextPostId":"f327cea6-a2a0-5455-b3bf-775a2c50d3e3"}},
    "staticQueryHashes": ["2841359383","3257411868"]}