{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-06-18-Go-sync-package/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"88853dfc-d841-5d01-bb77-8c61a6352395","excerpt":"Go sync package 包提供了基本的同步原语，比如同步锁，还有其他的和，大多数都用于低级别的库，高级别的同步控制最好用。 Cond…","html":"<h1>Go sync package</h1>\n<p><code class=\"language-text\">sync</code>包提供了基本的同步原语，比如同步锁，还有其他的<code class=\"language-text\">Once</code>和<code class=\"language-text\">WaitGroup</code>，大多数都用于低级别的库，高级别的同步控制最好用<code class=\"language-text\">channels</code>。</p>\n<h2>Cond</h2>\n<p><code class=\"language-text\">Cond</code>实现了一个条件变量,等待或宣布事件发生的<code class=\"language-text\">goroutines</code>的集合点。</p>\n<p>任何一个<code class=\"language-text\">Cond</code>都有任意一个相关的锁对象<code class=\"language-text\">L</code>，可以是同步锁或者读写锁。不论选择哪一个必须在条件改变和等待调用方法前不被改变。</p>\n<p><code class=\"language-text\">Cond</code>使用之后不能被复制。</p>\n<p><code class=\"language-text\">Cond</code>主要用于<code class=\"language-text\">go</code>之间的消息通知。</p>\n<h3>func (c *Cond) Wait()</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cond<span class=\"token punctuation\">)</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>等待<code class=\"language-text\">c.L</code>原子解锁以及暂停执行调用<code class=\"language-text\">goroutine</code>，之后再恢复执行，在返回前加锁<code class=\"language-text\">c.L</code>,除非被广播或信号唤醒，否则等待无法返回。</p>\n<p>使用例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">c<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span><span class=\"token function\">condition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span> <span class=\"token builtin\">make</span> use of condition <span class=\"token operator\">...</span>\nc<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>func (*Cond) Signal</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cond<span class=\"token punctuation\">)</span> Signal</code></pre></div>\n<p><code class=\"language-text\">Signal</code>函数是发送一个信号，用于唤醒一个等待的<code class=\"language-text\">go</code>,如果有多个<code class=\"language-text\">go</code>处于等待状态，则不能控制唤醒那个<code class=\"language-text\">go</code>。</p>\n<h3>func (*Cond) Broadcast</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cond<span class=\"token punctuation\">)</span> Broadcast</code></pre></div>\n<p><code class=\"language-text\">Broadcast</code>广播函数用于唤醒所有等待的<code class=\"language-text\">go</code>。</p>\n<h2>Mutex</h2>\n<p><code class=\"language-text\">Mutex</code>就是一个互斥锁的。保证任何资源只能被任何一个<code class=\"language-text\">go</code>使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Mutex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tstate <span class=\"token builtin\">int32</span> # 状态\n\tsema  <span class=\"token builtin\">uint32</span> # 信号量字段semaphore\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>func (*Mutex) Lock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Mutex<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>锁<code class=\"language-text\">m</code>,如果锁已被使用，则调用<code class=\"language-text\">goroutine</code>将阻塞，直到互斥锁可用。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"># Lock 函数<span class=\"token punctuation\">,</span>使用CAS算法，如果锁状态是<span class=\"token number\">0</span>，期望值也是<span class=\"token number\">0</span>，就修改为<span class=\"token number\">1</span>，如果再次加锁时，内存值是<span class=\"token number\">1</span>，期望值是<span class=\"token number\">0</span>，操作就是失败，得到的就是<span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>第一次加锁时m<span class=\"token punctuation\">.</span>state是<span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mutexLocked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> race<span class=\"token punctuation\">.</span>Enabled <span class=\"token punctuation\">{</span>\n\t\t\trace<span class=\"token punctuation\">.</span><span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n# 如果再次加锁就会进入<span class=\"token keyword\">go</span>等待队列中。如果lifo为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>队列等待在等待队列的头部。\t\n# m<span class=\"token punctuation\">.</span>sema 是信号量<span class=\"token punctuation\">,</span>这个方法可Semacquire方法一样，是为了Mutexes实现的，如果lifo为<span class=\"token boolean\">true</span>，则在等待队列的头部排队服务员\n<span class=\"token function\">runtime_SemacquireMutex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">.</span>sema<span class=\"token punctuation\">,</span> queueLifo<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"># Semacquire等待直到<span class=\"token operator\">*</span> s<span class=\"token operator\">></span> <span class=\"token number\">0</span>然后以原子方式递减它。\n<span class=\"token keyword\">func</span> <span class=\"token function\">runtime_Semacquire</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>func (*Mutex) Unlock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Mutex<span class=\"token punctuation\">)</span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# 解锁的时候就进行m<span class=\"token punctuation\">.</span>state原子加<span class=\"token operator\">-</span><span class=\"token number\">1</span>，如果多次解锁就会运行时异常。\n<span class=\"token builtin\">new</span> <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>mutexLocked<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">new</span><span class=\"token operator\">+</span>mutexLocked<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>mutexLocked <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync: unlock of unlocked mutex\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n# 这个方法主要是执行原子的递增m<span class=\"token punctuation\">.</span>sema<span class=\"token punctuation\">,</span>并通知一个阻塞在Semacquire的等待goroutines\n<span class=\"token function\">runtime_Semrelease</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">.</span>sema<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>互斥锁与<code class=\"language-text\">go</code>不绑定，可以<code class=\"language-text\">go1</code>进行加锁,<code class=\"language-text\">go2</code>进行解锁。只要解锁在加锁后操作就行。</p>\n<p><code class=\"language-text\">go</code>中的互斥锁是通过信号量和</p>\n<h2>Once</h2>\n<p><code class=\"language-text\">Once</code>是一个只执行一次动作的对象。一般可以用于连接关闭，保证只执行一次;或者用于执行初始化，保证只初始化一次。</p>\n<h3>func (*Once) Do</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">*</span>Once<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Slow-path.</span>\n\to<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> o<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> o<span class=\"token punctuation\">.</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">defer</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">StoreUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果<code class=\"language-text\">once.Do(f)</code>被调用多次，也只会执行一次，即时参数<code class=\"language-text\">f</code>不一致也只会执行一次。每个需要执行一次的函数都需要创建一个<code class=\"language-text\">Once</code>对象。执行<code class=\"language-text\">f</code>函数时如果出现<code class=\"language-text\">panics</code>也会认为执行过了，不会再次调用这个函数。</p>\n<p>如果出现循环调用就会出现死锁；这个点看源码就知道了。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">once<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tonce<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Pool</h2>\n<p>池是一组可以单独保存和检索的临时对象,池中的对象可能会被自动删除，池使用时时安全的；池主要时缓存已经创建但是未使用到对象，这样可以减轻GC的压力；<code class=\"language-text\">fmt</code>包中使用的池时比较好的，在大负载下进行扩展，在负载降低时进行收缩。</p>\n<h2>RWMutex</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> RWMutex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tw           Mutex  <span class=\"token comment\">// 写互斥锁</span>\n\twriterSem   <span class=\"token builtin\">uint32</span> <span class=\"token comment\">// 写信号量</span>\n\treaderSem   <span class=\"token builtin\">uint32</span> <span class=\"token comment\">// 读信号量</span>\n\treaderCount <span class=\"token builtin\">int32</span>  <span class=\"token comment\">// 读阻塞的数量</span>\n\treaderWait  <span class=\"token builtin\">int32</span>  <span class=\"token comment\">// 读放弃的数量</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> rwmutexMaxReaders <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span></code></pre></div>\n<p>加读锁最大次数是<code class=\"language-text\">2^30</code>次。</p>\n<p><code class=\"language-text\">RWMutex</code>是一个读写互斥锁，可以拥有多个读锁或者一个写锁，<code class=\"language-text\">RWMutex</code>的零值状态时是互斥锁,写锁的优先级高于读写锁。</p>\n<p>解释一下写锁的优先级高于读锁：比如有<code class=\"language-text\">10</code>个<code class=\"language-text\">goroutines</code>获取了读锁，此时再有一个<code class=\"language-text\">go</code>来获取写锁，这个<code class=\"language-text\">go</code>就会进入阻塞状态,然后又有一组<code class=\"language-text\">go</code>来获取读锁，此时就获取不到读锁了，需要等前面的读锁全部释放完，并且写锁释放过后才能再次获取读锁，所以就是说写锁优先级高于读锁。不这样处理的话写锁会处于永久饥饿中。</p>\n<h3>func (*RWMutex) Lock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rw <span class=\"token operator\">*</span>RWMutex<span class=\"token punctuation\">)</span> Lock </code></pre></div>\n<p>用于<code class=\"language-text\">rw</code>的写锁，如果锁是已经被读或写使用，那锁将阻塞知道可用。</p>\n<h3>func (*RWMutex) RLock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rw <span class=\"token operator\">*</span>RWMutex<span class=\"token punctuation\">)</span> RLock </code></pre></div>\n<p>用于<code class=\"language-text\">rw</code>的读锁，次锁不能被递归调用。</p>\n<h3>func (*RWMutex) RLocker</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rw <span class=\"token operator\">*</span>RWMutex<span class=\"token punctuation\">)</span> RLocker</code></pre></div>\n<p><code class=\"language-text\">RLocker</code>返回一个<code class=\"language-text\">Locker</code>接口，通过调用<code class=\"language-text\">Lock</code>和<code class=\"language-text\">Unlock</code>来实现<code class=\"language-text\">rw.RLock</code>和<code class=\"language-text\">rw.RUnlock</code>方法。</p>\n<h3>func (*RWMutex) RUnlock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rw <span class=\"token operator\">*</span>RWMutex<span class=\"token punctuation\">)</span> RUnlock </code></pre></div>\n<p><code class=\"language-text\">RUnlock</code>用于解锁其中一个读锁，如果没有加的读锁就会出现异常。</p>\n<h3>func (*RWMutex) Unlock</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rw <span class=\"token operator\">*</span>RWMutex<span class=\"token punctuation\">)</span> Unlock</code></pre></div>\n<p>解除<code class=\"language-text\">rw</code>的写锁，如果<code class=\"language-text\">rw</code>是没有加写锁就会出现运行时异常。和互斥锁一样<code class=\"language-text\">Mutex</code>,锁对象和<code class=\"language-text\">goroutines</code>没有关联，可以任意<code class=\"language-text\">go</code>加锁，任意<code class=\"language-text\">go</code>解锁。</p>\n<h2>Context</h2>\n<p><code class=\"language-text\">Context</code>主要用于在一个<code class=\"language-text\">http request</code>中，启动了多个<code class=\"language-text\">go</code>去访问其他资源，<code class=\"language-text\">context</code>主要用于可以统一控制其他的<code class=\"language-text\">go</code>一起退出。\n<code class=\"language-text\">Context</code>方法可以由多个<code class=\"language-text\">go</code>同时使用。</p>\n<p><code class=\"language-text\">Context</code>定义的接口如下，主要实现如下的几个功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//子go用于监听父go是否发起结束当前go的消息</span>\n    <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 返回关闭的原因</span>\n    <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    <span class=\"token comment\">//返回到期时间，比如设置了5s取消，那返回的值就是5s后的时间，ok is true if your setting deadling</span>\n    <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//从context中取出key的值</span>\n    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用方法主要由如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"># 设置超时返回，并返回一个新的context\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n# 没有超时时间，只是用于通知子<span class=\"token keyword\">go</span>执行关闭\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span>\n# 设置一个值到context中，并返回一个新的ctx\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> Context</code></pre></div>\n<p>主要使用的一个<code class=\"language-text\">Http</code>请求中，用来控制子<code class=\"language-text\">go</code>。如下的代码是模拟在一个<code class=\"language-text\">demo</code>的<code class=\"language-text\">controller</code>中，去并发的请求其他资源，比如数据库资源，还有<code class=\"language-text\">gRpc</code>调用等，这些操作都是用子<code class=\"language-text\">go</code>去调用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span>demo<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8888\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span>r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\ttimeout<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">ParseDuration</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tctx context<span class=\"token punctuation\">.</span>Context\n\t\tcancel context<span class=\"token punctuation\">.</span>CancelFunc\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tctx<span class=\"token punctuation\">,</span>cancel <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tdatabase <span class=\"token operator\">:=</span> <span class=\"token function\">getDatabaseData</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n\tage<span class=\"token punctuation\">,</span>ct <span class=\"token operator\">:=</span> <span class=\"token function\">gRpcServer</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> deadline<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">:=</span> ct<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>ageKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> value <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value:\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Database:%s\\nAge:%d\"</span><span class=\"token punctuation\">,</span>database<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getDatabaseData</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\tc <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"database\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">case</span> r <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> r\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">gRpcServer</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\tc <span class=\"token operator\">&lt;-</span> <span class=\"token number\">24</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tct <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ageKey<span class=\"token punctuation\">,</span> ageKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ct\n\t<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span>ct\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这两个方法有点问题，会出现<code class=\"language-text\">go</code>不能会回收，泄漏的情况，在这种情况下会出现：函数中启动的<code class=\"language-text\">go</code>还在休眠，还没有写入到<code class=\"language-text\">c</code>中，此时收到<code class=\"language-text\">ctx.Done()</code>的信号，就返回了，此时就会出现写入不了<code class=\"language-text\">c</code>这个<code class=\"language-text\">chan</code>中，于是这个<code class=\"language-text\">go</code>就永远不能被释放了。</p>\n<p><strong>解决办法有两种:</strong></p>\n<ul>\n<li>接收到关闭信号之后等待<code class=\"language-text\">c</code>返回</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getDatabaseData</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\tc <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"database\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t    <span class=\"token operator\">&lt;-</span> c <span class=\"token comment\">//在此等待c返回，但是这样就会阻塞http请求，就会出现变成同步操作。</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">case</span> r <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> r\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n# 下一个方法同上</code></pre></div>\n<ul>\n<li>还有一种就是关闭这个<code class=\"language-text\">chan</code>，这种既可以快速返回，也不会出现<code class=\"language-text\">go</code>不能释放</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getDatabaseData</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">// 如果加入关闭通道的操作，那就一定要加捕获panic的操作，不然会导致程序推出。因为发送到一个关闭的chan中会出现panic</span>\n\t    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\tc <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"database\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">case</span> r <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> r\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>涉及到的算法</h2>\n<h3>CAS 算法</h3>\n<p><code class=\"language-text\">CAS</code>算法又叫无锁算法，全称是<code class=\"language-text\">(Compare-and-swap)</code>比较交换算法。<code class=\"language-text\">CAS</code>算法是原子操作，是并发安全的。</p>\n<p><code class=\"language-text\">CAS</code>算法有三个操作数,第一个是内存值V，第二个是旧预期值A，第三个是新值B；当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>\n<h3>信号量算法</h3>\n<p>信号量是<code class=\"language-text\">Unix</code>系统提供的一种保护共享资源的机制，用于防止多个线程同时访问某个资源。</p>\n<p>可简单理解为信号量为一个数值：</p>\n<ul>\n<li>当信号量>0时，表示资源可用，获取信号量时系统自动将信号量减1；</li>\n<li>当信号量==0时，表示资源暂不可用，获取信号量时，当前线程会进入睡眠，当信号量为正时被唤醒；</li>\n<li></li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://golang.org/pkg/sync/\">https://golang.org/pkg/sync/</a></li>\n<li><a href=\"https://colobu.com/2019/04/28/gopher-2019-concurrent-in-action/#Cond\">https://colobu.com/2019/04/28/gopher-2019-concurrent-in-action/#Cond</a></li>\n<li><a href=\"https://blog.golang.org/context\">Go Concurrency Patterns: Context</a></li>\n</ul>","frontmatter":{"title":"Go sync package","date":"June 18, 2019","description":null}},"previous":{"fields":{"slug":"/2019-06-14-Go并发编程测试分解/"},"frontmatter":{"title":"Go 并发编程测试分析"}},"next":{"fields":{"slug":"/2019-06-19-linux-sed/"},"frontmatter":{"title":"linux sed"}}},"pageContext":{"id":"88853dfc-d841-5d01-bb77-8c61a6352395","previousPostId":"41a8b1d8-aef8-5946-9e63-9e6c62db69c6","nextPostId":"8d441f9e-8fed-525e-a069-61ff8b5d6144"}},
    "staticQueryHashes": ["2841359383","3257411868"]}