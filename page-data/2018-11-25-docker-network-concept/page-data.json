{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2018-11-25-docker-network-concept/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"eb6e54fc-fbb2-5f58-a9cc-e8e1a2810b12","excerpt":"容器的网络模型 的网络架构是构建在一组称为容器网络模型(CNM)的接口之上的。这个CNM的原理是为了提供多种不同的基础系统架构的应用程可用性。\n最初的容器网络设计只关注如何在单个主机上运行容器并使他们可以从网络访问；在模式下，容器在主机的中运行并使用主机IP…","html":"<h1>容器的网络模型</h1>\n<p><code class=\"language-text\">Docker</code>的网络架构是构建在一组称为容器网络模型(CNM)的接口之上的。这个CNM的原理是为了提供多种不同的基础系统架构的应用程可用性。\n最初的容器网络设计只关注如何在单个主机上运行容器并使他们可以从网络访问；在<code class=\"language-text\">host</code>模式下，容器在主机的<code class=\"language-text\">Network Namespace</code>中运行并使用主机IP地址，暴露容器端口在主机外面，容器会使用主机的端口。\n这个<code class=\"language-text\">bridge</code>模式对<code class=\"language-text\">host</code>模式进行了改进，在<code class=\"language-text\">Bridge</code>模式下，容器通过<code class=\"language-text\">IPAM</code>IP地址管理模块来提供IP，从它自己的网络空间中获取自己的网络IP，此时容器有自己的网络命名空间，不会出现端口冲突，但是容器如果要暴露服务在主机外部，仍然需要使用主机IP。该技术是使用的<code class=\"language-text\">NAT</code>网络地址转换实现的，在主机IP:主机端口和容器IP:容器端口之间进行映射，这些转换规则是使用<code class=\"language-text\">iptables</code>实现的，这种实现限制了解决方案的规模和性能。此方案并没有解决多主机的容器网络通信问题。</p>\n<p><img src=\"cnm.png\" alt=\"cnm\"></p>\n<h2>CNM 结构</h2>\n<p>上图是<code class=\"language-text\">CNM</code>中的几个高级结构，他们都是和<code class=\"language-text\">'OS</code>无关的。</p>\n<ul>\n<li>Sandbox：沙箱包含网络容器的配置，这包括管理容器的接口，路由表和<code class=\"language-text\">DNS</code>配置，沙箱是通过<code class=\"language-text\">Linux</code>的命名空间实现的。一个容器就是一个沙箱盒子。</li>\n<li>Endpoint：一个<code class=\"language-text\">Endpoint</code>连接一个沙箱和一个网络。</li>\n<li>Network：<code class=\"language-text\">CNM</code>没有根据<code class=\"language-text\">OSI</code>模型指定网络，</li>\n</ul>\n<h1>CNM 驱动接口</h1>\n<p>这个CNM模型提供了两个插件和开放接口提供给用户使用，可以使用他们它们来对网络的功能进行控制。</p>\n<h2>网络驱动的类型</h2>\n<ul>\n<li>网络驱动程序：<code class=\"language-text\">Docker</code>网络驱动程序是网络功能的实现，它们是可拔插的，因此可以使用不同的驱动程序提供给不通的应用使用，在集群中可以使用多个网络驱动器，但是单个<code class=\"language-text\">Docker</code>网络只能通过单个网络驱动程序实现，有两种类型的CNM网络驱动程序。</li>\n<li>\n<ul>\n<li>内置网络驱动程序：<code class=\"language-text\">Docker</code>引擎内置了几种网络驱动程序，比如，网络驱动，overlay 驱动。</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>插件网络驱动程序：是由社区或者其他供应商提供的，用于与现有软件和硬件的提成，用户还可以自己实现。</li>\n</ul>\n</li>\n<li>IPAM 驱动：<code class=\"language-text\">Docker</code>有内置的<code class=\"language-text\">IP</code>地址管理器，如果未指定，则使用默认的子网和网络，用户也可指定子网和网关。</li>\n</ul>\n<h2>Docker内置网络驱动程序</h2>\n<p><code class=\"language-text\">Docker</code>内置网络驱动程序是引擎的一部分，不需要任何其他模块，通过使用<code class=\"language-text\">docker network</code>命令来创建和使用网络模块。</p>\n<ul>\n<li>Bridge：<code class=\"language-text\">Bridge</code>驱动程序在宿主机上创建<code class=\"language-text\">Linux</code>网桥，网桥上的容器默认可以通信，也可以配置对容器的外部访问。</li>\n<li>Overlay：<code class=\"language-text\">overlay</code>驱动程序在宿主机上创建一个覆盖网络，支持开箱即用的多主机网络，通过使用<code class=\"language-text\">linux</code>网桥和<code class=\"language-text\">VXLAN</code>让宿主机上物理网络来实现容器到容器的多主机通信。</li>\n<li>MACVLAN：<code class=\"language-text\">macvlan</code>驱动程序使用<code class=\"language-text\">macvlan</code>桥接模式在容器和宿主机之间建立连接。</li>\n<li>Host：使用<code class=\"language-text\">host</code>驱动程序，容器将使用宿主机的网络栈，主机上的所有接口都可以由容器使用。</li>\n<li>None：<code class=\"language-text\">none</code>驱动程序为容器提供自己的网络堆栈和命名空间，但不配置接口，如果没有其他配置，容器将于宿主机网络完全隔离。</li>\n</ul>\n<p>默认情况下一个<code class=\"language-text\">Docker</code>主机上有<code class=\"language-text\">none</code>,<code class=\"language-text\">bridge</code>,<code class=\"language-text\">host</code>三种网络驱动程序，这些网络程序不能被删除，当使用<code class=\"language-text\">Swarm</code>时，会添加两个网络，一个是叫<code class=\"language-text\">docker_gwbridge</code>的<code class=\"language-text\">bridge</code>网络，还有一个是叫<code class=\"language-text\">ingress</code>的<code class=\"language-text\">overlay</code>的网络程序，这两个网络是自动创建在整个集群中的。</p>\n<h1>Linux 网络原理</h1>\n<h1>名词解释</h1>\n<ul>\n<li><a href=\"https://cizixs.com/2017/02/10/network-virtualization-network-namespace/\">Network Namespace</a></li>\n</ul>\n<p>网络命名空间。</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Network_address_translation\">NAT</a></li>\n</ul>\n<p>网络地址转换，这是一种网络虚拟化的技术，是为了解决IP不够用的问题。</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/IP_address_management\">IPAM</a></li>\n</ul>\n<p>IP地址管理,对应于CNM模型中的IPAM模块，提供IP管理和生成。</p>\n<h1>参考文档</h1>\n<ul>\n<li><a href=\"https://github.com/docker/libnetwork/blob/master/docs/design.md\">CNM 设计</a></li>\n<li><a href=\"https://docs.docker.com/engine/extend/legacy_plugins/#installing-a-plugin\">Docker 引擎添加插件</a></li>\n</ul>","frontmatter":{"title":"docker 网络概念","date":"November 25, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-24-docker-Compose-user/"},"frontmatter":{"title":"docker Compose 使用"}},"next":{"fields":{"slug":"/2018-11-27-docker-multi-stage-builds/"},"frontmatter":{"title":"docker 多阶段构建"}}},"pageContext":{"id":"eb6e54fc-fbb2-5f58-a9cc-e8e1a2810b12","previousPostId":"eea82286-7d57-5432-aea7-fca5b9819cc9","nextPostId":"4d797d0f-009f-5c44-b490-5300ac314230"}},
    "staticQueryHashes": ["2841359383","3257411868"]}