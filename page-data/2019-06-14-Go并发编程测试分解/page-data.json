{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-06-14-Go并发编程测试分解/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"41a8b1d8-aef8-5946-9e63-9e6c62db69c6","excerpt":"Go 并发编程测试分析 本文是对晁岳攀老师博客中提到的并发测试例子的讲解。 我按问题类型来分类说明错误原因。 所以P中没有可以调度的G时就会出现死锁 这个问题涉及到的题目为:，. 1、Mutex…","html":"<h1>Go 并发编程测试分析</h1>\n<p>本文是对<code class=\"language-text\">https://colobu.com/2019/04/28/go-concurrency-quizzes/</code>晁岳攀老师博客中提到的并发测试例子的讲解。</p>\n<p>我按问题类型来分类说明错误原因。</p>\n<h2>所以P中没有可以调度的G时就会出现死锁</h2>\n<p>这个问题涉及到的题目为:<code class=\"language-text\">1、Mutex</code>，<code class=\"language-text\">2、RWMutex</code>.</p>\n<h3>1、Mutex</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token keyword\">var</span> chain <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tchain <span class=\"token operator\">=</span> <span class=\"token string\">\"main\"</span>\n\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tchain <span class=\"token operator\">=</span> chain <span class=\"token operator\">+</span> <span class=\"token string\">\" --> A\"</span>\n\t<span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tchain <span class=\"token operator\">=</span> chain <span class=\"token operator\">+</span> <span class=\"token string\">\" --> B\"</span>\n\t<span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tchain <span class=\"token operator\">=</span> chain <span class=\"token operator\">+</span> <span class=\"token string\">\" --> C\"</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nfatal <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> all goroutines are asleep <span class=\"token operator\">-</span> deadlock<span class=\"token operator\">!</span></code></pre></div>\n<p>这一题的问题是<code class=\"language-text\">runtime</code>中只有一个<code class=\"language-text\">G</code>，但是当运行到<code class=\"language-text\">A()</code>方法是以及加锁，后面的<code class=\"language-text\">C()</code>方法接着去加锁，就会出现拿不到锁，于是这个<code class=\"language-text\">G</code>的状态就变为不可运行，所以就出现了<code class=\"language-text\">deadlock!</code>.</p>\n<h3>2、RWMutex</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>RWMutex\n<span class=\"token keyword\">var</span> count <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcount<span class=\"token operator\">++</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nfatal <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> all goroutines are asleep <span class=\"token operator\">-</span> deadlock<span class=\"token operator\">!</span></code></pre></div>\n<p>这一题的原因也是一样的，<code class=\"language-text\">G</code>A休眠之后状态就会变为等待，此时,主<code class=\"language-text\">G</code>去那锁也没有那到，就会变为不可运行状态，并让出<code class=\"language-text\">cpu</code>,此时所有的<code class=\"language-text\">G</code>都不可运行就出现死锁了。</p>\n<h2>WaitGroup 使用问题</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n<span class=\"token builtin\">panic</span><span class=\"token punctuation\">:</span> sync<span class=\"token punctuation\">:</span> WaitGroup is reused before previous Wait has returned</code></pre></div>\n<p>原因是多调用了一个<code class=\"language-text\">wg.Add(1)</code>。</p>\n<h2>4、双检查实现单例</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> doublecheck\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> Once <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tm    sync<span class=\"token punctuation\">.</span>Mutex\n\tdone <span class=\"token builtin\">uint32</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">*</span>Once<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> o<span class=\"token punctuation\">.</span>done <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\to<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> o<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> o<span class=\"token punctuation\">.</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\to<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这一题争议最大，博主是想告诉我们类似于<code class=\"language-text\">Java</code>里面缓存变量的问题，我觉得这里是不会出现问题的，因为对象是指针调用；运行本身没有问题，但是会出现数据竞争。使用<code class=\"language-text\">go run -race main.go</code>运行就会发现有数据竞争。</p>\n<h2>5、同步对象使用后不能被拷贝</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> MyMutex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tcount <span class=\"token builtin\">int</span>\n\tsync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> mu MyMutex\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> mu2 <span class=\"token operator\">=</span> mu\n\tmu<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmu2<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmu2<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n\tmu2<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span> mu2<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nfatal <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> all goroutines are asleep <span class=\"token operator\">-</span> deadlock<span class=\"token operator\">!</span></code></pre></div>\n<p>这个原因就是同步对象使用过之后不能再被拷贝，如果上面把<code class=\"language-text\">mu.Lock()</code>和<code class=\"language-text\">var mu2 = mu</code>这两行进行交换一下就可以了。\n使用过后不可以复制的对象有：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\n<span class=\"token comment\">// A Cond must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> Cond <span class=\"token keyword\">struct</span> \n<span class=\"token comment\">// A Map must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> Map <span class=\"token keyword\">struct</span>\n<span class=\"token comment\">// A Mutex must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> Mutex <span class=\"token keyword\">struct</span>\n<span class=\"token comment\">// A Pool must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> Pool <span class=\"token keyword\">struct</span>\n<span class=\"token comment\">// A RWMutex must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> RWMutex <span class=\"token keyword\">struct</span>\n<span class=\"token comment\">// A WaitGroup must not be copied after first use.</span>\n<span class=\"token keyword\">type</span> WaitGroup <span class=\"token keyword\">struct</span></code></pre></div>\n<p><code class=\"language-text\">sync</code>包下的<code class=\"language-text\">struct</code>除了<code class=\"language-text\">Once</code>这个结构体其他的使用过后都不能被复制。不能被复制也包括函数传递参数，比如如下的使用是错误的:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> main<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> wa sync<span class=\"token punctuation\">.</span>WaitGroup\n    <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wa<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>wa sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wa.Down()\"</span><span class=\"token punctuation\">)</span>\n            wa<span class=\"token punctuation\">.</span><span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>wa<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    wa<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码就有问题，首先<code class=\"language-text\">wa</code>对象以及使用了<code class=\"language-text\">wa.Add(1)</code>,后面开启一个<code class=\"language-text\">go</code>时确做参数传入，此时传入的是一个副本，就会出现不能正确的执行<code class=\"language-text\">wa.Down()</code>；此处可以修改为传递指针<code class=\"language-text\">go func(wa *sync.WaitGroup)</code>或者使用闭包的方式使用<code class=\"language-text\">WaitGroup</code>对象。</p>\n<h2>7、channel</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"runtime\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">&lt;-</span>ch\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\tc <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n#goroutines<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n#goroutines<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n#goroutines<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></code></pre></div>\n<p>这一题比较简单，但是我还是忽略了一个关键点，最后运行中有两个<code class=\"language-text\">g</code>，原因就是<code class=\"language-text\">time.Tick</code>其实是开启了一个<code class=\"language-text\">G</code>来计时的，然后通过<code class=\"language-text\">Channel</code>来通知。</p>\n<p>我们来看一下<code class=\"language-text\">time.Tick</code>里面的实现:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">time 包\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span>d Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Ticker<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token comment\">// 这个方法对应到runtime.startTimer()方法上</span>\n<span class=\"token punctuation\">}</span>\nruntime 包 \n<span class=\"token comment\">// startTimer adds t to the timer heap.</span>\n<span class=\"token comment\">//go:linkname startTimer time.startTimer</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> raceenabled <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">racerelease</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">addtimer</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//在addtimer()方法中启动了一个`G`。</span></code></pre></div>\n<h2>13、for range 问题</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> T <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tV <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span>wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span>V<span class=\"token operator\">++</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>V<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> ts <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ts <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ts <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token keyword\">go</span> run main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n<span class=\"token number\">999999999</span></code></pre></div>\n<p>这一题可以是因为使用了<code class=\"language-text\">for range</code>的方式，这种方式中的<code class=\"language-text\">t</code>只是一个变量，会一直在边，当使用<code class=\"language-text\">go t.Incr()</code>的时候，此时的<code class=\"language-text\">t</code>已经变为了最后一个值，所以输出都是<code class=\"language-text\">9</code>，这个在使用<code class=\"language-text\">map</code>时也有这个问题，得到 的<code class=\"language-text\">k/v</code>只是值的一个拷贝。</p>","frontmatter":{"title":"Go 并发编程测试分析","date":"June 14, 2019","description":null}},"previous":{"fields":{"slug":"/2019-06-10-Go-bootstrap-process/"},"frontmatter":{"title":"Go Bootstrap Process"}},"next":{"fields":{"slug":"/2019-06-18-Go-sync-package/"},"frontmatter":{"title":"Go sync package"}}},"pageContext":{"id":"41a8b1d8-aef8-5946-9e63-9e6c62db69c6","previousPostId":"53f9e5f2-e9fb-5a8b-87f7-7b3956772160","nextPostId":"88853dfc-d841-5d01-bb77-8c61a6352395"}},
    "staticQueryHashes": ["2841359383","3257411868"]}