{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-03-25-Inverted-index/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"e54ec16f-0044-55cc-a261-8213f3df3076","excerpt":"倒排索引(Inverted index) 文章写的有点粗糙，都是只描述了思想，没有去抠具体的细节部分，对这些项目的作者刚到敬仰，把一个理论上的技术用在工程上会遇到很多问题。如果文章中有不妥之处，欢迎去我的提交 issues…","html":"<h1>倒排索引(Inverted index)</h1>\n<p>文章写的有点粗糙，都是只描述了思想，没有去抠具体的细节部分，对这些项目的作者刚到敬仰，把一个理论上的技术用在工程上会遇到很多问题。如果文章中有不妥之处，欢迎去我的<code class=\"language-text\">github</code>提交 <a href=\"https://github.com/lengrongfu/lengrongfu.github.io/issues\">issues</a>.</p>\n<blockquote>\n<p>倒排索引这个数据结构最先是用于搜索引擎的，搜索引擎就通过分析爬虫回来的页面，提取出关键字，记录下关键字对应网页的链接地址，做成一个哈希表，通过搜索关键字即可得到结果。这是理论定义上的倒排索引，工程上实现起来需要考虑很多问题，每个场景下实现的倒排索引都不太一样。</p>\n</blockquote>\n<p>整个倒排索引分两部分，左边是Term Dictionary(索引表，可简称为Dictionary)，是由一系列的Terms组成的；右边为Postings List(倒排表)，由所有的Term对应的Postings组成。</p>\n<h2>理论上的倒排索引</h2>\n<blockquote>\n<p>实现一个简单的倒排索引，通过读取一个文件内容，构造好索引内容，此处用一个<code class=\"language-text\">map</code>来存储这个对应关系，通过关键字搜索时打印出对应的行数据。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 这段内容复制自es的网站</span>\n\tContent <span class=\"token operator\">=</span>  <span class=\"token string\">\"The QUICK brown foxes jumped over the lazy dog!\\n\"</span> <span class=\"token operator\">+</span>\n\t\t       <span class=\"token string\">\"An analyzer specified in the query itself.\\n\"</span><span class=\"token operator\">+</span>\n\t\t\t   <span class=\"token string\">\"The search_analyzer mapping parameter.\\n\"</span><span class=\"token operator\">+</span>\n\t\t       <span class=\"token string\">\"The analyzer mapping parameter.\\n\"</span><span class=\"token operator\">+</span>\n\t\t\t   <span class=\"token string\">\"An analyzer in the index settings called default_search.\\n\"</span><span class=\"token operator\">+</span>\n\t\t\t   <span class=\"token string\">\"An analyzer in the index settings called default.\\n\"</span><span class=\"token operator\">+</span>\n\t\t\t   <span class=\"token string\">\"The standard analyzer\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> invertedIndex <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\tinvertedIndex <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\tcontents <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>Content<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> contents <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">:=</span> contents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\ts <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token string\">\".!\"</span><span class=\"token punctuation\">)</span>\n\t\tfields <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Fields</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> fields <span class=\"token punctuation\">{</span>\n\t\t\tfield <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>ok <span class=\"token operator\">:=</span> invertedIndex<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t\tinvertedIndex<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>invertedIndex<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tss  <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t\t\tss<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s\n\t\t\t\tinvertedIndex<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ss\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> word <span class=\"token builtin\">string</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"search word: \"</span><span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>word<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tdoc<span class=\"token punctuation\">,</span>ok <span class=\"token operator\">:=</span> invertedIndex<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no match\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> doc <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上就实现了一个简单的倒排索引，通过解析文本内容进行全文搜索，上面只是一个简单版本的搜索，工程中的需要考虑的就比较多了，首先分词器，不同的语言分词规则都不一样，中文、英文都不一样，还有是索引结构，有的用哈希表实现有的用树结构实现，文档内容存储和索引也是一个工程中难处理的问题。</p>\n<h2>Lucene 中的倒排索引</h2>\n<p><code class=\"language-text\">Lucene</code>把用于存储<code class=\"language-text\">Term</code>的索引文件叫<code class=\"language-text\">Terms Index</code>，它的后缀是<code class=\"language-text\">.tip</code>；把Postings信息分别存储在<code class=\"language-text\">.doc</code>、<code class=\"language-text\">.pay</code>、<code class=\"language-text\">.pox</code>，分别记录Postings的DocId信息和Term的词频、Payload信息、pox是记录位置信息。Terms Dictionary的文件后缀称为<code class=\"language-text\">.tim</code>，它是Term与Postings的关系纽带，存储了Term和其对应的Postings文件指针。</p>\n<p>总体来说，通过<code class=\"language-text\">Terms Index(.tip)</code>能够快速地在Terms Dictionary(.tim)中找到你的想要的Term，以及它对应的Postings文件指针与Term在Segment作用域上的统计信息。</p>\n<p>在<code class=\"language-text\">Lucene</code>中索引和搜索是不一样的，索引是指把<code class=\"language-text\">Document</code>进行分析，存入索引文件中，搜索是从索引文件中进行读取。</p>\n<p><img src=\"1.jpg\" alt=\"img\"></p>\n<p><code class=\"language-text\">Lucene</code>中的索引操作比较复杂，因为操作的数据量非常大，所以进行了多部索引处理，文件索引到文件就是一个小型的文件系统，倒排索引再映射到文件索引上。为了查找快速。</p>\n<p>文件索引应该是记录了整个文档的开始位置和结束为止，比如下：</p>\n<ul>\n<li>\n<p>数据文件：test.data</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1:the man is like dog2:this is a man3:this is a dog</code></pre></div>\n</li>\n<li>\n<p>文件索引文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1:[2-19]\n2:[22-32]\n3:[35-48] # 记录的就是数据文件中的具体偏移量</code></pre></div>\n</li>\n<li>\n<p>倒排索引记录</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[the](1,1)\n[man](1,2)(2,4)\n[is](1,3),(2,2),(3,2) # stopwords\n[like](1,4)\n[dog](1,5),(3,4)</code></pre></div>\n</li>\n</ul>\n<p>上面大概的描述了<code class=\"language-text\">Lucene</code>的存储结构，真实的有很多改进，比如数据文件有压缩，文件索引也有压缩。</p>\n<p><img src=\"/var/folders/rh/szl5pw3171d5x6ntky_249g80000gn/T/abnerworks.Typora/image-20190319140311238.png\" alt=\"image-20190319140311238\"></p>\n<p><code class=\"language-text\">Lucene</code>对于删除操作，不直接删除索引，而是通过标记为一删除操作。</p>\n<p><code class=\"language-text\">Lucene</code>中还有一个正向索引，用于存储<code class=\"language-text\">DocId</code>和文档全部的内容。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"http://www.nosqlnotes.com/technotes/searchengine/lucene-invertedindex-3/\">Lucene倒排索引实现原理探秘</a></li>\n<li><a href=\"https://sease.io/2015/07/exploring-solr-internals-lucene.html\">solr 倒排索引</a></li>\n</ul>\n<h2>Mysql Full index 全文索引中的倒排索引</h2>\n<p><code class=\"language-text\">InnoDB</code>全文索引是基于倒排索引设计的，倒排索引存储了一个单词对应的列表(倒排列表)，还存储了每个字在文档中的位置信息，作为偏移量。这就是一个用空间换时间的办法。</p>\n<h3>InnoDB 全文索引表</h3>\n<p>创建<code class=\"language-text\">InnoDB FullText</code>索引时，会创建一组索引表：</p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">mysql&gt; CREATE TABLE opening_lines (\n       id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       opening_line TEXT(500),\n       author VARCHAR(200),\n       title VARCHAR(200),\n       FULLTEXT idx (opening_line)\n       ) ENGINE=InnoDB;\n# 查看本地的辅助索引文件       \nmysql&gt; SELECT table_id, name, space from INFORMATION_SCHEMA.INNODB_SYS_TABLES\n       WHERE name LIKE &#39;test/%&#39;;       \n4128\ttest/FTS_000000000000101a_0000000000002049_INDEX_1\t4112\n4129\ttest/FTS_000000000000101a_0000000000002049_INDEX_2\t4113\n4130\ttest/FTS_000000000000101a_0000000000002049_INDEX_3\t4114\n4131\ttest/FTS_000000000000101a_0000000000002049_INDEX_4\t4115\n4132\ttest/FTS_000000000000101a_0000000000002049_INDEX_5\t4116\n4133\ttest/FTS_000000000000101a_0000000000002049_INDEX_6\t4117</code></pre></div>\n<p><code class=\"language-text\">InnoDB</code>使用实现的是<code class=\"language-text\">Full inverted index</code>，存储了单词对应的位置信息和<code class=\"language-text\">DocId</code>。这就是<code class=\"language-text\">Mysql</code>实现倒排索引的数据结构。</p>\n<p><img src=\"/var/folders/rh/szl5pw3171d5x6ntky_249g80000gn/T/abnerworks.Typora/image-20190319134843287.png\" alt=\"image-20190319134843287\"></p>\n<p>把上图进行索引之后存储的结构就是如下图，比如单词<code class=\"language-text\">days</code>，值为<code class=\"language-text\">(3:2),(6:2)</code>意思是<code class=\"language-text\">DocId</code>为<code class=\"language-text\">3</code>中的第二个单词和<code class=\"language-text\">DocId</code>为<code class=\"language-text\">6</code>中的第二个单词。</p>\n<p><img src=\"/var/folders/rh/szl5pw3171d5x6ntky_249g80000gn/T/abnerworks.Typora/image-20190319134808582.png\" alt=\"image-20190319134808582\"></p>\n<p><code class=\"language-text\">InnoDB</code>在内存中维护了一个<code class=\"language-text\">FTS Index Cache</code>全文检索缓存系统，在提交事务或者时超过<code class=\"language-text\">32m</code>时就进行合并到<code class=\"language-text\">Auxiliary Table</code>辅助索引表中；</p>\n<p>在插入或者删除时都是对缓存系统进行操作，删除也是知识记录，不直接进行删除操作。</p>\n<p><img src=\"/var/folders/rh/szl5pw3171d5x6ntky_249g80000gn/T/abnerworks.Typora/image-20190319141910280.png\" alt=\"image-20190319141910280\"></p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-fulltext-index.html\">Mysql 全文索引设计</a></li>\n</ul>\n<h2>Prometheus 中的倒排索引</h2>\n<p><code class=\"language-text\">Prometheus</code>2.0 版本中也使用了倒排索引来做搜索，架构和<code class=\"language-text\">Lucene</code>很相似，都是按时间分割，然后再合并，都是小文件合并为大文件，小索引合并为大索引，索引使用的不是<code class=\"language-text\">hashmap</code>结构，而是使用<code class=\"language-text\">LSM</code>数据结构。未完全看完，后面看完了之后再补上。</p>\n<h2>总结</h2>\n<p>基于<code class=\"language-text\">B+tree</code>实现的倒排索引会有性能问题，在写入时非常消耗<code class=\"language-text\">IO</code>,因为要进行排序并移动其他节点，<code class=\"language-text\">Lucene</code>的这种方式可以实现更高的并发性。</p>\n<ul>\n<li>Mysql 的倒排是基于红黑树实现的</li>\n<li>Lucene 是通过不断的创建小的索引文件，然后定期的把小的索引文件合并为一个大的索引文件。</li>\n</ul>","frontmatter":{"title":"Inverted-index","date":"March 24, 2019","description":null}},"previous":{"fields":{"slug":"/2019-03-17-PromQL-常用命令/"},"frontmatter":{"title":"PromQL 常用命令"}},"next":{"fields":{"slug":"/2019-03-30-Introduction-to-Algorithms-lecture-1/"},"frontmatter":{"title":"算法分析、插入排序、归并排序"}}},"pageContext":{"id":"e54ec16f-0044-55cc-a261-8213f3df3076","previousPostId":"42a16a64-5a82-5d26-a3e9-8488edb7627b","nextPostId":"bf5dcc7b-394c-51b4-a6d3-d23a60a08141"}},
    "staticQueryHashes": ["2841359383","3257411868"]}