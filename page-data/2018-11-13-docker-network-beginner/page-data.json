{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2018-11-13-docker-network-beginner/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"f327cea6-a2a0-5455-b3bf-775a2c50d3e3","excerpt":"Networking Basics 单主机 Bridge Driver 网桥驱动 当创建一个的网络驱动时这个模型是默认的，这个驱动创建了一个私有的网络环境，并在主机提供了一个外部端口以供外部使用。 当一个IP地址不指定时，端口会被映射到所有网卡上，0.0.0.0:8000，可以通过指定一个IP…","html":"<h1>Networking Basics</h1>\n<h1>单主机 Bridge Driver 网桥驱动</h1>\n<blockquote>\n<p>当创建一个<code class=\"language-text\">bridge</code>的网络驱动时这个模型是默认的，这个驱动创建了一个私有的网络环境，并在主机提供了一个外部端口以供外部使用。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#创建一个我们的应用用户定义的网桥网络</span>\n$ docker network create -d bridge catnet\n\n<span class=\"token comment\">#使用自定义的网络创建一个redis容器</span>\n$ docker run -d --net catnet --name cat-db redis\n\n<span class=\"token comment\">#Instantiate the web frontend on the catnet network and configure it to connect to a container named `cat-db`</span>\n<span class=\"token comment\"># 实例这个web容器，使用catnet这个网络并且配置它连接到cat-db的容器实例。</span>\n$ docker run -d --net catnet -p <span class=\"token number\">8000</span>:5000 -e <span class=\"token string\">'DB=cat-db'</span> -e <span class=\"token string\">'ROLE=cat'</span> chrch/web </code></pre></div>\n<blockquote>\n<p>当一个IP地址不指定时，端口会被映射到所有网卡上，0.0.0.0:8000，可以通过指定一个IP来只开放一个端口，<code class=\"language-text\">-p 127.0.0.1:8000:5000</code>,更多内容查看 <a href=\"https://docs.docker.com/engine/reference/run/#/expose-incoming-ports\">Docker doc</a>.</p>\n</blockquote>\n<p><img src=\"singlehost-bridge.png\" alt=\"singlehost-bridge\"></p>\n<p>两个容器通过同一个网桥进行网络通信，上面的<code class=\"language-text\">web</code>这个容器访问<code class=\"language-text\">redis</code>时通过<code class=\"language-text\">cat-db</code>这个域名进行访问，<code class=\"language-text\">Docker</code>引擎内部有<code class=\"language-text\">DNS</code>能将容器域名解析为可以访问的容器<code class=\"language-text\">IP</code>，因此,在<code class=\"language-text\">Bridge</code>模式下，多个容器都是可以通过容器名称进行访问。</p>\n<p>可以通过<code class=\"language-text\">docker network inspect catnet</code>查看这个网络下所以容器。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 如下可以看出有两个容器是使用了这同一个网络。</span>\n$ docker network inspect catnet\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"catnet\"</span>,\n        <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"81e45d3e3bf4f989abe87c42c8db63273f9bf30c1f5a593bae4667d5f0e33145\"</span>,\n        <span class=\"token string\">\"Scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,\n        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bridge\"</span>,\n        <span class=\"token string\">\"EnableIPv6\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"IPAM\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"default\"</span>,\n            <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Config\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Subnet\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.19.0.0/16\"</span>,\n                    <span class=\"token string\">\"Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.19.0.1/16\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Internal\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"Attachable\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"Containers\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"2a23faa18fb33b5d07eb4e0affb5da36449a78eeb196c944a5af3aaffe1ada37\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"backstabbing_pike\"</span>,\n                <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"9039dae3218c47739ae327a30c9d9b219159deb1c0a6274c6d994d37baf2f7e3\"</span>,\n                <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:ac:13:00:03\"</span>,\n                <span class=\"token string\">\"IPv4Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.19.0.3/16\"</span>,\n                <span class=\"token string\">\"IPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"dbf7f59187801e1bcd2b0a7d4731ca5f0a95236dbc4b4157af01697f295d4528\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"cat-db\"</span>,\n                <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"7f7c51a0468acd849fd575adeadbcb5310c5987195555620d60ee3ffad37c680\"</span>,\n                <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:ac:13:00:02\"</span>,\n                <span class=\"token string\">\"IPv4Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.19.0.2/16\"</span>,\n                <span class=\"token string\">\"IPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h1>多主机 Bridge Driver 网桥模式</h1>\n<p>在多台宿主机中使用<code class=\"language-text\">Bridge</code>网络模式，<code class=\"language-text\">redis</code>部署在<code class=\"language-text\">host-A</code>中，并且需要映射一个外部IP，供<code class=\"language-text\">web</code>去调用，<code class=\"language-text\">web</code>部署在<code class=\"language-text\">host-B</code>中，要调用<code class=\"language-text\">db</code>时，要通过<code class=\"language-text\">DB=host-A:6379</code>指定主机A的<code class=\"language-text\">host</code>和<code class=\"language-text\">redis</code>暴露的端口进行连接。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 每个docker中都有一个默认的Bridge网络模式</span>\nhost-A $ docker run -d -p <span class=\"token number\">6379</span>:6379 redis\nhost-B $ docker run -d -p <span class=\"token number\">8000</span>:5000 -e <span class=\"token string\">'DB=host-A:6379'</span> -e <span class=\"token string\">'ROLE=cat'</span> --name web chrch/web </code></pre></div>\n<p><img src=\"multihost-bridge.png\" alt=\"多主机模式\"></p>\n<p>主机B通过本机<code class=\"language-text\">Host</code>来解析主机A的IP地址已进行访问。通常不建议这样硬编码的使用服务地址。</p>\n<h1>Overlay Driver</h1>\n<p><code class=\"language-text\">overlay</code> 网络模式提供了服务发现和自动负载均衡的功能，但是前提是要把多主机部署为<code class=\"language-text\">swarm</code>集群模式。\n在<code class=\"language-text\">lead</code>上面查看<code class=\"language-text\">swarm</code>的节点数量。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker node <span class=\"token function\">ls</span>\nID                           <span class=\"token environment constant\">HOSTNAME</span>          STATUS  AVAILABILITY  MANAGER STATUS\na8dwuh6gy5898z3yeuvxaetjo    host-B  Ready   Active\nelgt0bfuikjrntv3c33hr0752 *  host-A  Ready   Active        Leader</code></pre></div>\n<p>创建一个自定义的<code class=\"language-text\">overlay</code>网络。在一个<code class=\"language-text\">overlay</code>网络中开放的<code class=\"language-text\">TCP</code>和<code class=\"language-text\">UDP</code>端口都是开放。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker network create -d overlay --subnet <span class=\"token number\">192.0</span>.0.0/24 --gateway <span class=\"token number\">192.0</span>.0.1 dognet\n$ docker <span class=\"token function\">service</span> create --network dognet --name dog-db redis\n$ docker <span class=\"token function\">service</span> create --network dognet -p <span class=\"token number\">8000</span>:5000  -e <span class=\"token string\">'DB=dog-db'</span> -e <span class=\"token string\">'ROLE=dog'</span> --name dog-web chrch/web</code></pre></div>\n<p><img src=\"pets-overlay.png\" alt=\"overlay网络模式\"></p>\n<p>上图讲解了上面的命令中的部署图，首先创建了一个叫<code class=\"language-text\">dognet</code>的<code class=\"language-text\">overlay</code>网络,然后创建一个<code class=\"language-text\">service</code>,使用<code class=\"language-text\">dognet</code>这个创建好的网络，并且不开放任何可访问端口，命令为<code class=\"language-text\">dog-db</code>；然后创建另一个服务，也是使用同一个网络，并且直接指定<code class=\"language-text\">redis</code>的name即可.</p>\n<p>同时访问两个<code class=\"language-text\">overlay</code>的网络模式，比如有一个<code class=\"language-text\">admin</code>需要同时访问<code class=\"language-text\">dog-web</code>和<code class=\"language-text\">cat-web</code>两个服务。我们可以如下操作，先启动一个<code class=\"language-text\">catnet</code>的<code class=\"language-text\">overlay</code>网络。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker network create -d overlay --subnet <span class=\"token number\">172.0</span>.0.0/24 --gateway <span class=\"token number\">172.0</span>.0.1 catnet\n$ docker <span class=\"token function\">service</span> create --network catnet --name cat-db redis\n$ docker <span class=\"token function\">service</span> create --network catnet -p <span class=\"token number\">8000</span>:5000  -e <span class=\"token string\">'DB=cat-db'</span> -e <span class=\"token string\">'ROLE=cat'</span> --name cat-web chrch/web\n\n<span class=\"token comment\"># 同时使用两个overlay的网络环境</span>\n$ docker <span class=\"token function\">service</span> create --network catnet --network dognet -p <span class=\"token number\">7000</span>:5000 -e <span class=\"token string\">'DB1=dog-db'</span> -e <span class=\"token string\">'DB2=cat-db'</span> --name admin chrch/admin</code></pre></div>\n<p><img src=\"multitenant.png\" alt=\"多主机控制\">\n<code class=\"language-text\">dog-web</code>和<code class=\"language-text\">dog-db</code>之间网络可以互通，当时不可以访问<code class=\"language-text\">catnet</code>上的服务,<code class=\"language-text\">cat-web</code>和<code class=\"language-text\">cat-db</code>之间也是可以互相访问的，但是不可以访问<code class=\"language-text\">dognet</code>网络上的服务。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://github.com/docker/labs/blob/master/networking/tutorials.md\">https://github.com/docker/labs/blob/master/networking/tutorials.md</a></li>\n</ul>","frontmatter":{"title":"docker network 入门","date":"November 13, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-12-java-util-concurrency/"},"frontmatter":{"title":"java.util.concurrency 包"}},"next":{"fields":{"slug":"/2018-11-16-es-xpack-machinelean/"},"frontmatter":{"title":"es-xpack-machinelean"}}},"pageContext":{"id":"f327cea6-a2a0-5455-b3bf-775a2c50d3e3","previousPostId":"59f8103c-1218-59b4-8f12-b42f9e8f26b4","nextPostId":"92abb954-5c96-541f-997b-f717f5a31920"}},
    "staticQueryHashes": ["2841359383","3257411868"]}