{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-09-18-go-channel源码/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"f3829bb4-1135-5e06-a607-23c4d9546226","excerpt":"什么是Channel…","html":"<h1>什么是Channel</h1>\n<p><code class=\"language-text\">Channel</code>是<code class=\"language-text\">go</code>之间通信的一种方式，从实现上说，<code class=\"language-text\">channel</code>是一个链表的数据结构，可以将数据放入和读取。</p>\n<h1>基本使用</h1>\n<p><code class=\"language-text\">channel</code>分为有缓冲区的和无缓冲区的通道。</p>\n<h1>原理</h1>\n<p><code class=\"language-text\">channel</code>就是通过一个共享队列来做协程之间的数据传递的，是一种数据结构，低层还是通过锁来控制数据之间的安全；和我们自己实现的差别,加入了协程挂起和通知的功能，使得协程更加的快速。</p>\n<h2>发送消息时：</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">channel已经关闭，那就不能发。panic掉。\n看一下有没有阻塞在读操作上的goroutine，有的话取出上一次接收的位置，然后把发送的元素插入到缓冲槽尾部。所以写入有序，输出也是有序的。\n没有被阻塞的goroutine。如果带buffer，buffer还有空位，就放在buffer里。否则就阻塞挂起当前发送消息的goroutine。</code></pre></div>\n<h2>读取消息时：</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">channel已经关闭，也可以读，只是读出来的数据为空。\n看一下有没有阻塞的写操作的goroutine，有的话唤醒它。读取它发送的数据(A)。\n读取后的数据(A)放哪，视乎是带buffer还是无buffer。无buffer的话，就直接把写数据(A)给读取者。带buffer的话，就先看buffer里是否有数据(B)，有就把数据(B)给读取者，再把数据(A)放到原来数据(B)空出来的位置上。</code></pre></div>\n<h2>chan 结构体解读</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> hchan <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tqcount   <span class=\"token builtin\">uint</span>           <span class=\"token comment\">// 队列中的数据量</span>\n\tdataqsiz <span class=\"token builtin\">uint</span>           <span class=\"token comment\">// 队列的容量</span>\n\tbuf      unsafe<span class=\"token punctuation\">.</span>Pointer <span class=\"token comment\">// 存储数据的缓冲区</span>\n\telemsize <span class=\"token builtin\">uint16</span>         <span class=\"token comment\">//元素的占位大小</span>\n\tclosed   <span class=\"token builtin\">uint32</span>         <span class=\"token comment\">//关闭标志位，0 未关闭，1 关闭</span>\n\telemtype <span class=\"token operator\">*</span>_type <span class=\"token comment\">// 元素类型</span>\n\tsendx    <span class=\"token builtin\">uint</span>   <span class=\"token comment\">// 发送index</span>\n\trecvx    <span class=\"token builtin\">uint</span>   <span class=\"token comment\">// 接收index</span>\n\trecvq    waitq  <span class=\"token comment\">// 接收等待队列，存储了接收挂起的g</span>\n\tsendq    waitq  <span class=\"token comment\">// 存储了挂起的发送队列</span>\n    <span class=\"token comment\">//锁，保护hchan里面的字段</span>\n\tlock mutex\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>chansend 发送源码解读</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">chansend</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>hchan<span class=\"token punctuation\">,</span> ep unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">,</span> block <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> callerpc <span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//加锁</span>\n\t<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//1、如果关闭就panic，不能发送到一个关闭的channel</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>closed <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token function\">plainError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send on closed channel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//2、接收队列中取出一个g</span>\n\t<span class=\"token keyword\">if</span> sg <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>recvq<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> sg <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//找到一个等待的接收g，把数据直接复制到g的stack上，并把它安排在下一次调度上</span>\n\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> sg<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//3、如果缓冲队列还有空间</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>qcount <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">.</span>dataqsiz <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 将要发送的消息放入队列中</span>\n\t\tqp <span class=\"token operator\">:=</span> <span class=\"token function\">chanbuf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>sendx<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> raceenabled <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">raceacquire</span><span class=\"token punctuation\">(</span>qp<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">racerelease</span><span class=\"token punctuation\">(</span>qp<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">typedmemmove</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>elemtype<span class=\"token punctuation\">,</span> qp<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>sendx<span class=\"token operator\">++</span>\n\t\t<span class=\"token comment\">//记得归位</span>\n\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>sendx <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>dataqsiz <span class=\"token punctuation\">{</span>\n\t\t\tc<span class=\"token punctuation\">.</span>sendx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//放入一个+1，取出一个-1</span>\n\t\tc<span class=\"token punctuation\">.</span>qcount<span class=\"token operator\">++</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>block <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//4、如果没有缓冲区可用，把当前的g挂起，并加入到发送队列中</span>\n\tgp <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmysg <span class=\"token operator\">:=</span> <span class=\"token function\">acquireSudog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">if</span> t0 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tmysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// No stack splits between assigning elem and enqueuing mysg</span>\n\t<span class=\"token comment\">// on gp.waiting where copystack can find it.</span>\n\tmysg<span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> ep\n\tmysg<span class=\"token punctuation\">.</span>waitlink <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tmysg<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> gp\n\tmysg<span class=\"token punctuation\">.</span>isSelect <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tmysg<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c\n\tgp<span class=\"token punctuation\">.</span>waiting <span class=\"token operator\">=</span> mysg\n\tgp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>sendq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">goparkunlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">,</span> waitReasonChanSend<span class=\"token punctuation\">,</span> traceEvGoBlockSend<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Ensure the value being sent is kept alive until the</span>\n\t<span class=\"token comment\">// receiver copies it out. The sudog has a pointer to the</span>\n\t<span class=\"token comment\">// stack object, but sudogs aren't considered as roots of the</span>\n\t<span class=\"token comment\">// stack tracer.</span>\n\t<span class=\"token function\">KeepAlive</span><span class=\"token punctuation\">(</span>ep<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// someone woke us up.</span>\n\t<span class=\"token keyword\">if</span> mysg <span class=\"token operator\">!=</span> gp<span class=\"token punctuation\">.</span>waiting <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"G waiting list is corrupted\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgp<span class=\"token punctuation\">.</span>waiting <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> gp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>closed <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chansend: spurious wakeup\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token function\">plainError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send on closed channel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> mysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">blockevent</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">.</span>releasetime<span class=\"token operator\">-</span>t0<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tmysg<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token function\">releaseSudog</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>chanrecv 接收解读</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">chanrecv</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>hchan<span class=\"token punctuation\">,</span> ep unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">,</span> block <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">,</span> received <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token comment\">//先检查如果队列中没有元素，并且发送等待队列中也没有挂起的g，并且未关闭就直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>block <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>dataqsiz <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span>sendq<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span>\n\t\tc<span class=\"token punctuation\">.</span>dataqsiz <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Loaduint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>qcount<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>closed<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//加锁</span>\n\t<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//1、如果channel已经关闭并且队列元素个数为0，则返回，不会报panic</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>closed <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span>qcount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> raceenabled <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">raceacquire</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">raceaddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> ep <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">typedmemclr</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>elemtype<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//2、</span>\n\t<span class=\"token keyword\">if</span> sg <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>sendq<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> sg <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Found a waiting sender. If buffer is size 0, receive value</span>\n\t\t<span class=\"token comment\">// directly from sender. Otherwise, receive from head of queue</span>\n\t\t<span class=\"token comment\">// and add sender's value to the tail of the queue (both map to</span>\n\t\t<span class=\"token comment\">// the same buffer slot because the queue is full).</span>\n\t\t<span class=\"token comment\">// 如果buffer是0，从发送中直接获取并接收；除此之外，从队列头接收并且发送值到队尾</span>\n\t\t<span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> sg<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//3、如果缓存队列中还有元素，就取出来接收</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>qcount <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Receive directly from queue</span>\n\t\tqp <span class=\"token operator\">:=</span> <span class=\"token function\">chanbuf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>recvx<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> raceenabled <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">raceacquire</span><span class=\"token punctuation\">(</span>qp<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">racerelease</span><span class=\"token punctuation\">(</span>qp<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> ep <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">typedmemmove</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>elemtype<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">,</span> qp<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">typedmemclr</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>elemtype<span class=\"token punctuation\">,</span> qp<span class=\"token punctuation\">)</span>\n\t\tc<span class=\"token punctuation\">.</span>recvx<span class=\"token operator\">++</span>\n\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>recvx <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>dataqsiz <span class=\"token punctuation\">{</span>\n\t\t\tc<span class=\"token punctuation\">.</span>recvx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tc<span class=\"token punctuation\">.</span>qcount<span class=\"token operator\">--</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>block <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 没有可用的，就挂起当前的g，并放入接收等待队列中</span>\n\tgp <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmysg <span class=\"token operator\">:=</span> <span class=\"token function\">acquireSudog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">if</span> t0 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tmysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// No stack splits between assigning elem and enqueuing mysg</span>\n\t<span class=\"token comment\">// on gp.waiting where copystack can find it.</span>\n\tmysg<span class=\"token punctuation\">.</span>elem <span class=\"token operator\">=</span> ep\n\tmysg<span class=\"token punctuation\">.</span>waitlink <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tgp<span class=\"token punctuation\">.</span>waiting <span class=\"token operator\">=</span> mysg\n\tmysg<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> gp\n\tmysg<span class=\"token punctuation\">.</span>isSelect <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tmysg<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c\n\tgp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tc<span class=\"token punctuation\">.</span>recvq<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">goparkunlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">,</span> waitReasonChanReceive<span class=\"token punctuation\">,</span> traceEvGoBlockRecv<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// someone woke us up</span>\n\t<span class=\"token keyword\">if</span> mysg <span class=\"token operator\">!=</span> gp<span class=\"token punctuation\">.</span>waiting <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"G waiting list is corrupted\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgp<span class=\"token punctuation\">.</span>waiting <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">if</span> mysg<span class=\"token punctuation\">.</span>releasetime <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">blockevent</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">.</span>releasetime<span class=\"token operator\">-</span>t0<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tclosed <span class=\"token operator\">:=</span> gp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span>\n\tgp<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tmysg<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token function\">releaseSudog</span><span class=\"token punctuation\">(</span>mysg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>closed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>waitq 双向链表解读</h1>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// waitq 只保存了一个执行头和一个执行尾的指针，保存的元素都是sudog</span>\n<span class=\"token keyword\">type</span> waitq <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tfirst <span class=\"token operator\">*</span>sudog\n\tlast  <span class=\"token operator\">*</span>sudog\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// sudog 代表一个go在一个等待队列中</span>\n<span class=\"token keyword\">type</span> sudog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//下面的字段受hchan.lock锁的保护，</span>\n\tg <span class=\"token operator\">*</span>g\n\n\t<span class=\"token comment\">// isSelect 为true表示g正在参与select选择，g.selectDone必须被cas算法调用才能唤醒g</span>\n\tisSelect <span class=\"token builtin\">bool</span>\n\tnext     <span class=\"token operator\">*</span>sudog <span class=\"token comment\">// 下一个 这个两个字段组成了一个双向链表</span>\n\tprev     <span class=\"token operator\">*</span>sudog <span class=\"token comment\">// 上一个</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>入队列</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 队头和队尾分别指向第一个元素和最后一个元素，如果只有一个元素，那么队头和队尾都指向他</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>waitq<span class=\"token punctuation\">)</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>sgp <span class=\"token operator\">*</span>sudog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsgp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\tx <span class=\"token operator\">:=</span> q<span class=\"token punctuation\">.</span>last\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tsgp<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\tq<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> sgp\n\t\tq<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> sgp\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tsgp<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> x\n\tx<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> sgp\n\tq<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> sgp\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>出队列</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 出队列的时候，移动队头往后移动，并设置队头的元素指向下一个为nil，是一个FIFO队列</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span>waitq<span class=\"token punctuation\">)</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>sudog <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tsgp <span class=\"token operator\">:=</span> q<span class=\"token punctuation\">.</span>first\n\t\t<span class=\"token keyword\">if</span> sgp <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ty <span class=\"token operator\">:=</span> sgp<span class=\"token punctuation\">.</span>next\n\t\t<span class=\"token keyword\">if</span> y <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tq<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t\tq<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\ty<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t\tq<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> y\n\t\t\tsgp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// mark as removed (see dequeueSudog)</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//当g是在select阻塞的时候需要设置selectDone为1才能唤醒g</span>\n\t\t<span class=\"token keyword\">if</span> sgp<span class=\"token punctuation\">.</span>isSelect <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Cas</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sgp<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>selectDone<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> sgp\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>lock 实现解读</h1>\n<p>加锁和解锁没有使用<code class=\"language-text\">mutex</code>，而是使用了<code class=\"language-text\">futex</code>技术，这个是在<code class=\"language-text\">linux</code>系统环境下的，<code class=\"language-text\">futex</code>是一种高效的加锁方式。</p>\n<h2>lock 加锁</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tgp <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> gp<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>locks <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"runtime·lock: lock count\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgp<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>locks<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Speculative grab for lock.</span>\n\tv <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Xchg</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_locked<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> mutex_unlocked <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// wait is either MUTEX_LOCKED or MUTEX_SLEEPING</span>\n\t<span class=\"token comment\">// depending on whether there is a thread sleeping</span>\n\t<span class=\"token comment\">// on this mutex. If we ever change l->key from</span>\n\t<span class=\"token comment\">// MUTEX_SLEEPING to some other value, we must be</span>\n\t<span class=\"token comment\">// careful to change it back to MUTEX_SLEEPING before</span>\n\t<span class=\"token comment\">// returning, to ensure that the sleeping thread gets</span>\n\t<span class=\"token comment\">// its wakeup call.</span>\n\twait <span class=\"token operator\">:=</span> v\n\n\t<span class=\"token comment\">// On uniprocessors, no point spinning.</span>\n\t<span class=\"token comment\">// On multiprocessors, spin for ACTIVE_SPIN attempts.</span>\n\tspin <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">if</span> ncpu <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\tspin <span class=\"token operator\">=</span> active_spin\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Try for lock, spinning.</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> spin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> l<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> mutex_unlocked <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Cas</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_unlocked<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">procyield</span><span class=\"token punctuation\">(</span>active_spin_cnt<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Try for lock, rescheduling.</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> passive_spin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> l<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> mutex_unlocked <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Cas</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_unlocked<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">osyield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Sleep.</span>\n\t\tv <span class=\"token operator\">=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Xchg</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_sleeping<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> mutex_unlocked <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\twait <span class=\"token operator\">=</span> mutex_sleeping\n\t\t<span class=\"token function\">futexsleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_sleeping<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>unlock 解锁</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tv <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">Xchg</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mutex_unlocked<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> mutex_unlocked <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unlock of unlocked lock\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> mutex_sleeping <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">futexwakeup</span><span class=\"token punctuation\">(</span><span class=\"token function\">key32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tgp <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgp<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>locks<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">if</span> gp<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>locks <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"runtime·unlock: lock count\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> gp<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>locks <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> gp<span class=\"token punctuation\">.</span>preempt <span class=\"token punctuation\">{</span> <span class=\"token comment\">// restore the preemption request in case we've cleared it in newstack</span>\n\t\tgp<span class=\"token punctuation\">.</span>stackguard0 <span class=\"token operator\">=</span> stackPreempt\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Channel 的优点</h1>\n<p>1、和<code class=\"language-text\">goroutine</code>调度结合起来，使得数据传输更加的高效和快速。\n2、使用的锁不是操作系统的<code class=\"language-text\">mutex</code>互斥锁，而是使用的<code class=\"language-text\">futex</code>技术。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/\">http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Futex\">https://zh.wikipedia.org/wiki/Futex</a></li>\n</ul>","frontmatter":{"title":"go channel 实现","date":"September 18, 2019","description":null}},"previous":{"fields":{"slug":"/2019-07-03-Badger源码学习之-SkipList基础篇/"},"frontmatter":{"title":"Badger源码学习之-SkipList基础篇"}},"next":{"fields":{"slug":"/2019-10-20-intellij-idea激活/"},"frontmatter":{"title":"intellij-idea激活"}}},"pageContext":{"id":"f3829bb4-1135-5e06-a607-23c4d9546226","previousPostId":"6c780ea4-0ad8-5bcb-b7d9-d2bfe46357f6","nextPostId":"ac0336f7-fc01-5ed5-8a44-06419b9f6ac6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}