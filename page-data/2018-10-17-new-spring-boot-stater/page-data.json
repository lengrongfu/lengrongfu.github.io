{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2018-10-17-new-spring-boot-stater/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"102591c3-13ea-5192-81b9-6e8b774f5b48","excerpt":"spring boot stater 通过使用将一些层、组件拆分为模块来管理，以便相互依赖复用。 自定义 1、创建一个项目 首先自定义一个项目，中引入依赖。 这里说下的命名问题， 官方 通常命名为如 ， 官方建议非官方命名应遵循的格式.…","html":"<h1>spring boot stater</h1>\n<p>通过使用<code class=\"language-text\">Spring Boot Starter</code>将一些层、组件拆分为模块来管理，以便相互依赖复用。</p>\n<h2>自定义</h2>\n<h3>1、创建一个<code class=\"language-text\">Maven</code>项目</h3>\n<p>首先自定义一个<code class=\"language-text\">Maven</code>项目，<code class=\"language-text\">pom.xml</code>中引入依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\">&lt;!-- Import dependency management from Spring Boot --></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.5.2.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这里说下<code class=\"language-text\">artifactId</code>的命名问题，<code class=\"language-text\">Spring</code> 官方 <code class=\"language-text\">Starter</code>通常命名为<code class=\"language-text\">spring-boot-starter-{name}</code>如 <code class=\"language-text\">spring-boot-starter-web</code>， <code class=\"language-text\">Spring</code><a href=\"https://link.juejin.im/?target=http%3A%2F%2Fdocs.spring.io%2Fspring-boot%2Fdocs%2F1.5.2.RELEASE%2Freference%2Fhtmlsingle%2F%23boot-features-custom-starter-naming\">官方建议</a>非官方<code class=\"language-text\">Starter</code>命名应遵循<code class=\"language-text\">{name}-spring-boot-starter</code>的格式.</p>\n<h3>2、创建一个简单的<code class=\"language-text\">Starter</code></h3>\n<p>提供一个简单的<code class=\"language-text\">Stater</code>,提供一个<code class=\"language-text\">Service</code>,包含一个能够将字符串加上前后缀的方法String wrap(String word)。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefix <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suffix <span class=\"token operator\">=</span> suffix<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> prefix <span class=\"token operator\">+</span> word <span class=\"token operator\">+</span> suffix<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前缀、后缀通过读取application.properties(yml)内的参数获得。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.service\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceProperties</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">;</span>\n\t#省略 set 和 get\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编写<code class=\"language-text\">AutoConfigure</code>类。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ConditionalOnClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoServiceProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoAutoConfigure</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">DemoServiceProperties</span> demoServiceProperties<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"demo.service\"</span><span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">,</span>havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">DemoService</span> <span class=\"token function\">demoService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoService</span><span class=\"token punctuation\">(</span>demoServiceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>demoServiceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解释下用到的几个和Starter相关的注解：</p>\n<ul>\n<li><code class=\"language-text\">@ConditionalOnClass</code>，当<code class=\"language-text\">classpath</code>下发现该类的情况下进行自动配置。</li>\n<li><code class=\"language-text\">@ConditionalOnMissingBean</code>，当<code class=\"language-text\">Spring Context</code>中不存在该<code class=\"language-text\">Bean</code>时。</li>\n<li><code class=\"language-text\">@ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")</code>，当配置文件中<code class=\"language-text\">example.service.enabled=true</code>时</li>\n</ul>\n<p>更多相关注解，建议阅读<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fdocs.spring.io%2Fspring-boot%2Fdocs%2F1.5.2.RELEASE%2Freference%2Fhtmlsingle%2F%23boot-features-bean-conditions\">官方文档部分</a></p>\n<p>最后一步，在resources/META-INF/下创建spring.factories文件，内容供参考下面:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.demospringbootstarter.DemoAutoConfigure\n</code></pre></div>\n<p>执行<code class=\"language-text\">mvn install</code> 打包安装。</p>\n<h2>使用</h2>\n<h3>1、新建一个新的<code class=\"language-text\">Spring Boot</code>项目</h3>\n<p>把<code class=\"language-text\">stater</code>的依赖加入项目中。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>demo-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>创建<code class=\"language-text\">application.properties</code>，进行配置</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\"><pre class=\"language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">demo.service.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token attr-name\">demo.service.prefix</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">####</span>\n<span class=\"token attr-name\">demo.service.suffix</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">@@@@</span></code></pre></div>\n<p>使用</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">DemoService</span> demoService<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/input/{word}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> demoService<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>原理</h2>\n<p>总结下<code class=\"language-text\">Starter</code>的工作原理.</p>\n<ul>\n<li><code class=\"language-text\">Spring Boot</code>在启动时扫描项目所依赖的<code class=\"language-text\">JAR</code>包，寻找包含<code class=\"language-text\">spring.factories</code>文件的<code class=\"language-text\">JAR</code>包</li>\n<li>根据<code class=\"language-text\">spring.factories</code>配置加载<code class=\"language-text\">AutoConfigure</code>类</li>\n<li>根据 <code class=\"language-text\">@Conditional</code>注解的条件，进行自动配置并将<code class=\"language-text\">Bean</code>注入<code class=\"language-text\">Spring Context</code></li>\n</ul>\n<h2>参考文档</h2>\n<ul>\n<li><a href=\"https://juejin.im/entry/58d37630570c350058c2c15c\">https://juejin.im/entry/58d37630570c350058c2c15c</a></li>\n<li><a href=\"\">官网文档</a></li>\n</ul>","frontmatter":{"title":"自定义 spring-boot-stater","date":"October 17, 2018","description":null}},"previous":{"fields":{"slug":"/2018-10-17-elk-install/"},"frontmatter":{"title":"elk 搭建"}},"next":{"fields":{"slug":"/2018-10-17-linux-Keepalived/"},"frontmatter":{"title":"linux-Keepalived 使用"}}},"pageContext":{"id":"102591c3-13ea-5192-81b9-6e8b774f5b48","previousPostId":"9e93593c-2b75-5d99-ac31-cd338a87fd54","nextPostId":"7994394f-2ca6-5aa6-a30b-b955f32f32d1"}},
    "staticQueryHashes": ["2841359383","3257411868"]}