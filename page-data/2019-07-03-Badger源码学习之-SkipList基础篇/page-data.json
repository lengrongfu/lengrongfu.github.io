{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-07-03-Badger源码学习之-SkipList基础篇/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"6c780ea4-0ad8-5bcb-b7d9-d2bfe46357f6","excerpt":"Badger源码学习之-SkipList基础篇 SkipList…","html":"<h1>Badger源码学习之-SkipList基础篇</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Skip_list\">SkipList</a> 全称跳跃表，具体定义可以查看维基百科的定义，或者<a href=\"http://homepage.cs.uiowa.edu/~ghosh/skip.pdf\">论文</a>。<code class=\"language-text\">SkipList</code>是一个有序的高效的链表结构，数组数据结构的<code class=\"language-text\">search</code>的时间复杂度为<code class=\"language-text\">O(lgn)</code>，通过二分法搜索，但是插入和删除的时间复杂度为<code class=\"language-text\">O(n)</code>；链表的<code class=\"language-text\">search</code>的时间复杂度为<code class=\"language-text\">O(n)</code>，插入和删除的时间复杂度为<code class=\"language-text\">O(lg)</code>。<code class=\"language-text\">SkipList</code>这个数据结构很好的结合了这两种数据结构的特性，<code class=\"language-text\">search</code>、<code class=\"language-text\">insert</code>、<code class=\"language-text\">delete</code>的时间复杂度都是<code class=\"language-text\">O(lgn)</code>，但是空间复杂度比其他的高，利用了空间换取时间的做法。</p>\n<p><code class=\"language-text\">SkipList</code>是根据链表而来的，其数据结构类似与链表。</p>\n<h2>链表</h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEBd674a10db06c67251c7f6fa7fdab6816?method=download&#x26;shareKey=d5888342b4deb27fcaaabf4767cfe334\" alt=\"singl-list.jpg\"></p>\n<p>这就是一个简单的顺序链表，每次<code class=\"language-text\">search</code>、<code class=\"language-text\">insert</code>、<code class=\"language-text\">delete</code>的时间复杂度都是<code class=\"language-text\">O(n)</code>，都需要遍历整个链表。</p>\n<h2>SkipList</h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEB2484842e529d992295f5918ed9f99767?method=download&#x26;shareKey=0836909ea6857dd9b6ba2b13c5f81401\" alt=\"skip list\">\n<code class=\"language-text\">SkipList</code>和单链表的不同点就是相邻两层的节点比为<code class=\"language-text\">1/2</code>。查找的时间从最上层开始来查找，这就相对于建了一个索引。</p>\n<p>层级之间节点比为<code class=\"language-text\">1/2</code>实现起来有会边复杂，相当于需要固定维护相邻层级之间的关系。所以作者推荐使用一个随机高度，每个节点的高度随机产生，再去修改节点的前后关系。通过设置一个最大高度和相邻节点比来生成随机高度。如下设置的最大高度是<code class=\"language-text\">20</code>，相邻节点是<code class=\"language-text\">1/3</code>；算法作者推荐这个比最好为<code class=\"language-text\">1/2^n</code>次方,但是我不明白为啥<code class=\"language-text\">badger</code>选择<code class=\"language-text\">1/3</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 这事badger中的随机高度的实现方式，</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tmaxHeight      <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\theightIncrease <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>MaxUint32 <span class=\"token operator\">/</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">randomHeight</span><span class=\"token punctuation\">(</span>heightIncrease <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int32</span> <span class=\"token punctuation\">{</span>\n\th <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">for</span> h <span class=\"token operator\">&lt;</span> maxHeight <span class=\"token operator\">&amp;&amp;</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Uint32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> heightIncrease <span class=\"token punctuation\">{</span>\n\t\th<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">int32</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>高度看似是随机产生的，但是是按比例划分的，官方是按照概率去计算的，我通过生成<code class=\"language-text\">10000000</code>个数字来查看数字的分布，基本是和上面的概率比一致的。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Test_randomHeight1</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tnum <span class=\"token operator\">:=</span> <span class=\"token number\">10000000</span>\n\tdata2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tdata2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randomHeight</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint32 <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tscatterData2 <span class=\"token operator\">:=</span> <span class=\"token function\">randomPoints1</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span>\n\n\tdata3 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tdata3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randomHeight</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint32 <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tscatterData3 <span class=\"token operator\">:=</span> <span class=\"token function\">randomPoints1</span><span class=\"token punctuation\">(</span>data3<span class=\"token punctuation\">)</span>\n\n\tdata4 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tdata4<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randomHeight</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint32 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tscatterData4  <span class=\"token operator\">:=</span> <span class=\"token function\">randomPoints1</span><span class=\"token punctuation\">(</span>data4<span class=\"token punctuation\">)</span>\n\n\tdata5 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tdata5<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randomHeight</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint32 <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tscatterData5 <span class=\"token operator\">:=</span> <span class=\"token function\">randomPoints1</span><span class=\"token punctuation\">(</span>data5<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Create a new plot, set its title and</span>\n\t<span class=\"token comment\">// axis labels.</span>\n\tp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> plot<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tp<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Points Example\"</span>\n\tp<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">.</span>Label<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"X\"</span>\n\tp<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">.</span>Label<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Y\"</span>\n\t<span class=\"token comment\">// Draw a grid behind the data</span>\n\t<span class=\"token comment\">//p.Add(plotter.NewGrid())</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//// Make a scatter plotter and set its style.</span>\n\t<span class=\"token comment\">//s, err := plotter.NewScatter(scatterData)</span>\n\t<span class=\"token comment\">//if err != nil {</span>\n\t<span class=\"token comment\">//\tpanic(err)</span>\n\t<span class=\"token comment\">//}</span>\n\t<span class=\"token comment\">//s.GlyphStyle.Color = color.RGBA{R: 255, B: 128, A: 255}</span>\n\t<span class=\"token comment\">//p.Add(s)</span>\n\tl2<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> plotter<span class=\"token punctuation\">.</span><span class=\"token function\">NewLinePoints</span><span class=\"token punctuation\">(</span>scatterData2<span class=\"token punctuation\">)</span>\n\tl2<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tl2<span class=\"token punctuation\">.</span>Dashes <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Dashes</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ts2<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ts2<span class=\"token punctuation\">.</span>Shape <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\tl3<span class=\"token punctuation\">,</span> s3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> plotter<span class=\"token punctuation\">.</span><span class=\"token function\">NewLinePoints</span><span class=\"token punctuation\">(</span>scatterData3<span class=\"token punctuation\">)</span>\n\tl3<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tl3<span class=\"token punctuation\">.</span>Dashes <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Dashes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\ts3<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\ts3<span class=\"token punctuation\">.</span>Shape <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\tl4<span class=\"token punctuation\">,</span> s4<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> plotter<span class=\"token punctuation\">.</span><span class=\"token function\">NewLinePoints</span><span class=\"token punctuation\">(</span>scatterData4<span class=\"token punctuation\">)</span>\n\tl4<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tl4<span class=\"token punctuation\">.</span>Dashes <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Dashes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ts4<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ts4<span class=\"token punctuation\">.</span>Shape <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n\tl5<span class=\"token punctuation\">,</span> s5<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> plotter<span class=\"token punctuation\">.</span><span class=\"token function\">NewLinePoints</span><span class=\"token punctuation\">(</span>scatterData5<span class=\"token punctuation\">)</span>\n\tl5<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\tl5<span class=\"token punctuation\">.</span>Dashes <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Dashes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\ts5<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\ts5<span class=\"token punctuation\">.</span>Shape <span class=\"token operator\">=</span> plotutil<span class=\"token punctuation\">.</span><span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//plotutil.AddLinePoints(p, scatterData2,scatterData3,scatterData4,scatterData5)</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">,</span>l3<span class=\"token punctuation\">,</span>s3<span class=\"token punctuation\">,</span>l4<span class=\"token punctuation\">,</span>s4<span class=\"token punctuation\">,</span>l5<span class=\"token punctuation\">,</span>s5<span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>Legend<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line points 2\"</span><span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>Legend<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line points 3\"</span><span class=\"token punctuation\">,</span> l3<span class=\"token punctuation\">,</span> s3<span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>Legend<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line points 4\"</span><span class=\"token punctuation\">,</span> l4<span class=\"token punctuation\">,</span> s4<span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>Legend<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line points 5\"</span><span class=\"token punctuation\">,</span> l5<span class=\"token punctuation\">,</span> s5<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Save the plot to a PNG file.</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token operator\">*</span>vg<span class=\"token punctuation\">.</span>Inch<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token operator\">*</span>vg<span class=\"token punctuation\">.</span>Inch<span class=\"token punctuation\">,</span> <span class=\"token string\">\"4-points0.5.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test Pass\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// randomPoints returns some random x, y points.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">randomPoints1</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> plotter<span class=\"token punctuation\">.</span>XYs <span class=\"token punctuation\">{</span>\n\tm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> n <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok  <span class=\"token punctuation\">{</span>\n\t\t\tm<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tm<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tpts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span>plotter<span class=\"token punctuation\">.</span>XYs<span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n\t\tk <span class=\"token operator\">:=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\t\tv <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token function\">int32</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n\t\tpts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\t\tpts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\ti <span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map:%+v\\n\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> pts\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我写了如上的一个测试程序，并画出数据的分布情况。\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEB3e6a78c1c7642b5eee88e6752c4ae91a?method=download&#x26;shareKey=cab1b3a195affd9b3e24c9827a290495\" alt=\"分布\"></p>\n<p>横轴是最大高度，纵轴是分布在高度上的情况，从图上可以看出，<code class=\"language-text\">p</code>越小，衰变的速度越快，数据分布越集中，当<code class=\"language-text\">p</code>为<code class=\"language-text\">1/2</code>是数据基本是按层级间<code class=\"language-text\">1/2</code>的关系递减的。</p>\n<h2>实现</h2>\n<p>官方论文中有实现的伪代码，按照伪代码即可实现。</p>\n<h3>Search</h3>\n<p>如下是查询时的一个伪代码，基本逻辑就是从头节点的最高层级开始变量查询，如果查询节点不为<code class=\"language-text\">nil</code>并且<code class=\"language-text\">key</code>大于当前节点的<code class=\"language-text\">key</code>，就往后查询，否则层级下降。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> searchKey<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">:=</span> list→header\n    <span class=\"token operator\">--</span> loop invariant<span class=\"token punctuation\">:</span> x→key <span class=\"token operator\">&lt;</span> searchKey\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> list→level downto <span class=\"token number\">1</span> do\n        while x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;</span> x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→key <span class=\"token operator\">&lt;</span> searchKey do\n            x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">--</span> x→key <span class=\"token operator\">&lt;</span> searchKey ≤ x→forward<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>→key\n    x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> x→key <span class=\"token operator\">=</span> searchKey then \n        <span class=\"token keyword\">return</span> x→value\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> failure</code></pre></div>\n<h3>Insert</h3>\n<p>插入的不同点就是要记录下查找的路径，后面需要更新插入前后的元素;只记录阶梯变化的最后一个；下面的<code class=\"language-text\">update</code>数组就是记录变化的，然后查找到要插入的地方，如果<code class=\"language-text\">key</code>已经存在就更新值，不存在就插入。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> searchKey<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    local update<span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span>MaxLevel<span class=\"token punctuation\">]</span>\n    x <span class=\"token operator\">:=</span> list→header\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> list→level downto <span class=\"token number\">1</span> do\n        while x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→key <span class=\"token operator\">&lt;</span> searchKey do\n            x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> x\n    x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> x→key <span class=\"token operator\">=</span> searchKey then x→value <span class=\"token operator\">:=</span> newValue\n    <span class=\"token keyword\">else</span>\n        newLevel <span class=\"token operator\">:=</span> <span class=\"token function\">randomLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> newLevel <span class=\"token operator\">></span> list→level then\n            <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> list→level <span class=\"token operator\">+</span> <span class=\"token number\">1</span> to newLevel do\n                update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> list→header\n            list→level <span class=\"token operator\">:=</span> newLevel\n        x <span class=\"token operator\">:=</span> <span class=\"token function\">makeNode</span><span class=\"token punctuation\">(</span>newLevel <span class=\"token punctuation\">,</span> searchKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> to newLevel do\n            x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> x</code></pre></div>\n<h3>Delete</h3>\n<p>删除是同样需要记录查找路径，后面需要更新前后的路径。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> searchKey<span class=\"token punctuation\">)</span>\n    local update<span class=\"token punctuation\">[</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span>MaxLevel<span class=\"token punctuation\">]</span>\n    x <span class=\"token operator\">:=</span> list→header\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> list→level downto <span class=\"token number\">1</span> do\n        while x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→key <span class=\"token operator\">&lt;</span> searchKey do\n            x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> x\n    x <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> x→key <span class=\"token operator\">=</span> searchKey then\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> to list→level do\n            <span class=\"token keyword\">if</span> update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> ≠ x then <span class=\"token keyword\">break</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:=</span> x→forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        while list→level <span class=\"token operator\">></span> <span class=\"token number\">1</span> and\n            list→header→forward<span class=\"token punctuation\">[</span>list→level<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> NIL do\n            list→level <span class=\"token operator\">:=</span> list→level – <span class=\"token number\">1</span></code></pre></div>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://zhangtielei.com/posts/blog-redis-skiplist.html\">redis之Skiplist</a></li>\n<li><a href=\"http://homepage.cs.uiowa.edu/~ghosh/skip.pdf\">论文</a></li>\n<li><a href=\"https://eugene-eeo.github.io/blog/skip-lists.html\">https://eugene-eeo.github.io/blog/skip-lists.html</a></li>\n<li><a href=\"https://ticki.github.io/blog/skip-lists-done-right/\">https://ticki.github.io/blog/skip-lists-done-right/</a></li>\n</ul>","frontmatter":{"title":"Badger源码学习之-SkipList基础篇","date":"June 29, 2019","description":null}},"previous":{"fields":{"slug":"/2019-06-19-linux-sed/"},"frontmatter":{"title":"linux sed"}},"next":{"fields":{"slug":"/2019-09-18-go-channel源码/"},"frontmatter":{"title":"go channel 实现"}}},"pageContext":{"id":"6c780ea4-0ad8-5bcb-b7d9-d2bfe46357f6","previousPostId":"8d441f9e-8fed-525e-a069-61ff8b5d6144","nextPostId":"f3829bb4-1135-5e06-a607-23c4d9546226"}},
    "staticQueryHashes": ["2841359383","3257411868"]}