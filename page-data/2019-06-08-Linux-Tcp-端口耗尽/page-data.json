{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019-06-08-Linux-Tcp-端口耗尽/",
    "result": {"data":{"site":{"siteMetadata":{"title":"LRF"}},"markdownRemark":{"id":"c89f5c10-b95b-5d23-93aa-58986a87c16a","excerpt":"Linux Tcp 端口耗尽 在连接中如果并发占用的端口过多，就会报。我们一个正常的可以提供多大并发的连接呢？ 端口数量的理论限制 每个连接在操作系统中由…","html":"<h1>Linux Tcp 端口耗尽</h1>\n<p>在<code class=\"language-text\">Tcp</code>连接中如果并发占用的端口过多，就会报<code class=\"language-text\">socket: too many open files</code>。我们一个正常的<code class=\"language-text\">service</code>可以提供多大并发的连接呢？</p>\n<h2>端口数量的理论限制</h2>\n<p>每个<code class=\"language-text\">TCP</code>连接在操作系统中由4元组唯一标识，包括：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(local ip, local port, peer ip, peer port)</code></pre></div>\n<p>如果客户端和服务端在统一机器的话<code class=\"language-text\">local ip</code>和<code class=\"language-text\">peer ip</code>是一样的，并且<code class=\"language-text\">peer port</code>是固定的，就是服务端提供的端口，唯一变化的就是<code class=\"language-text\">local port</code>这个变量，这个值是一个<code class=\"language-text\">16</code>字节的数，所以最大值为<code class=\"language-text\">65536</code>，这个是理论上的限制。</p>\n<h2>实际中端口限制</h2>\n<h3>1、当前用户进程可打开的文件数限制</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 通过ulimit 这个命令可以查看操作系统分配给每个进程可以拥有的文件具柄数量。\n$ ulimit -n\n1024</code></pre></div>\n<h3>2、ip范围</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 这个配置文件中规定了最小端口和最大端口，理论上可以分配的最多端口就是最大端口减去最小端口。\n$ cat /proc/sys/net/ipv4/ip_local_port_range\n32768\t60999</code></pre></div>\n<h3>3、linux 硬件上支持可以打开的最大文件连接数</h3>\n<p><strong>这个参数的默认值是跟内存大小有关系的，增加物理内存以后重启机器，这个值会增大。大约1G内存10万个句柄的线性关系。这个值是可以修改的，但是不要轻易修改。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 查看最大文件具柄数\n$ cat /proc/sys/fs/file-max \n791038\n# 查看内存信息\n$ cat /proc/meminfo\nMemTotal:        8009808 kB\n# 查看当前使用的文件具柄\n$ cat /proc/sys/fs/file-nr \n5568\t0\t791038\n5568:已分配文件句柄的数目    \n0:   分配了但没有使用的句柄数  \n791038:文件句柄最大数目</code></pre></div>\n<p><strong>端口数量可分配的限制是由最小值限制的，比如上面的三种情况中的1,用户进程可分配的文件句柄为1024,那么就只可以创建这么多的。</strong></p>\n<h2>修改可支持的文件具柄数</h2>\n<h3>1、修改用户进程可支持的最大文件具柄数。</h3>\n<p>如果单个进程想要支持更多的文件具柄可以调大，但是对于tcp来说最多就只支持65535个端口数。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 编辑如下的文件，并加入下入的内容\n$ vim /etc/security/limits.conf\n* soft nofile 65535\n* hard nofile 65535</code></pre></div>\n<p>上述的配置修改之后当前的会话并不能马上生效，现在使用<code class=\"language-text\">ulimit -n</code>查看，值仍然是<code class=\"language-text\">1024</code>，可以使用<code class=\"language-text\">ulimit -n 65535</code>这样的方式让这次的会话生效。</p>\n<h3>2、ip范围端口也可更改范围</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">vim</span> /proc/sys/net/ipv4/ip_local_port_range\n<span class=\"token number\">1024</span>\t<span class=\"token number\">65535</span></code></pre></div>\n<p>把可分配的端口范围调大一些。端口分配有上限，就是<strong>65535</strong>，只能把下限往下调整，一般情况<code class=\"language-text\">1024</code>一下的端口分配的操作系统使用，所以不要调整到<code class=\"language-text\">1024</code>一下去。</p>\n<h2>测试</h2>\n<h3>服务端代码</h3>\n<p>创建一个<code class=\"language-text\">service</code>，并监听<code class=\"language-text\">8899</code>端口,暴露一个<code class=\"language-text\">/test</code>请求，这个请求里面有一个休眠，休眠时间为一个小时，我了模拟并发，把所有的请求都阻塞，不返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>RemoteAddr<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>RequestURI<span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is test https service\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmux <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewServeMux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tmux<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//http.ListenAndServeTLS(\":8899\", \"server.crt\", \"server.key\", nil)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8899\"</span><span class=\"token punctuation\">,</span> mux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>客户端代码</h3>\n<p>客户端通过添加请求的数量和请求地址来进行模拟并发请求，保证每个请求都不被释放端口占用。这样可以用于检验上述的配置是否有效。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"net/http/pprof\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tnum <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\turl <span class=\"token operator\">*</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tclient <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>DefaultClient\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\tnum <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http request number\"</span><span class=\"token punctuation\">)</span>\n\turl <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http request url\"</span><span class=\"token punctuation\">)</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>url <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request url is not nil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">gorequest</span><span class=\"token punctuation\">(</span>wait <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span>  <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tbytes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response:\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> wait<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> wait sync<span class=\"token punctuation\">.</span>WaitGroup\n\twait<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span>num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">gorequest</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wait<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\twait<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>参考文章</h1>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/ad2754432a4b\">https://www.jianshu.com/p/ad2754432a4b</a></li>\n<li><a href=\"https://blog.51cto.com/ityunwei2017/1558092\">https://blog.51cto.com/ityunwei2017/1558092</a></li>\n<li><a href=\"https://making.pusher.com/ephemeral-port-exhaustion-and-how-to-avoid-it/\">https://making.pusher.com/ephemeral-port-exhaustion-and-how-to-avoid-it/</a></li>\n</ul>","frontmatter":{"title":"Linux Tcp 端口耗尽","date":"June 08, 2019","description":null}},"previous":{"fields":{"slug":"/2019-05-21-orange-原理/"},"frontmatter":{"title":"orange原理以及使用"}},"next":{"fields":{"slug":"/2019-06-10-Go-bootstrap-process/"},"frontmatter":{"title":"Go Bootstrap Process"}}},"pageContext":{"id":"c89f5c10-b95b-5d23-93aa-58986a87c16a","previousPostId":"4ef3b52f-9471-530c-a843-0036dc5b2916","nextPostId":"53f9e5f2-e9fb-5a8b-87f7-7b3956772160"}},
    "staticQueryHashes": ["2841359383","3257411868"]}