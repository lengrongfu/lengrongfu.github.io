"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[5709],{8488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>i});var r=n(4848),o=n(8453);const a={slug:"kubelet-fore-analyze",title:"kubelet\u6e90\u7801\u5206\u6790 syncLoopIteration\uff08\u4e09\uff09 probeCH",authors:["rongfu"],tags:["Kubernetes","Kubelet"]},s=void 0,d={permalink:"/blog/kubelet-fore-analyze",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-08-30-kubelet-fore-analyze.md",source:"@site/blog/2024-08-30-kubelet-fore-analyze.md",title:"kubelet\u6e90\u7801\u5206\u6790 syncLoopIteration\uff08\u4e09\uff09 probeCH",description:"\u5728\u4ee3\u7801\u4e2d\u662f\u6ca1\u6709 probeCh \u8fd9\u4e2a chan \u7684\uff0c\u4e3b\u8981\u662f\u7531 livenessManager readinessManager startupManager \u8fd9\u4e09\u4e2a\u63a2\u9488\u7684 chan \u6784\u6210\u7684\u3002",date:"2024-08-30T00:00:00.000Z",tags:[{inline:!1,label:"Kubernetes",permalink:"/blog/tags/kubernetes",description:"kubernetes"},{inline:!1,label:"Kubelet",permalink:"/blog/tags/Kubelet",description:"Kubelet"}],readingTime:3.805,hasTruncateMarker:!0,authors:[{name:"Leng",title:"Softwore Developer",url:"https://github.com/lengrongfu",image_hrl:"https://avatars.githubusercontent.com/u/15009201?v=4",socials:{github:"https://github.com/lengrongfu"},key:"rongfu",page:null}],frontMatter:{slug:"kubelet-fore-analyze",title:"kubelet\u6e90\u7801\u5206\u6790 syncLoopIteration\uff08\u4e09\uff09 probeCH",authors:["rongfu"],tags:["Kubernetes","Kubelet"]},unlisted:!1,prevItem:{title:"kubelet\u6e90\u7801\u5206\u6790 podManager\u548cpodWorkers\u3001workQueue",permalink:"/blog/kubelet-five-analyze"},nextItem:{title:"kubelet\u6e90\u7801\u5206\u6790 syncLoopIteration\uff08\u4e8c\uff09 plegCH",permalink:"/blog/kubelet-three-analyze"}},c={authorsImageUrls:[void 0]},i=[{value:"ProbeManager",id:"probemanager",level:3},{value:"livenessManager\u3001readinessManager\u3001startupManager",id:"livenessmanagerreadinessmanagerstartupmanager",level:3}];function l(e){const t={code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["\u5728\u4ee3\u7801\u4e2d\u662f\u6ca1\u6709 ",(0,r.jsx)(t.code,{children:"probeCh"})," \u8fd9\u4e2a ",(0,r.jsx)(t.code,{children:"chan"})," \u7684\uff0c\u4e3b\u8981\u662f\u7531 ",(0,r.jsx)(t.code,{children:"livenessManager"})," ",(0,r.jsx)(t.code,{children:"readinessManager"})," ",(0,r.jsx)(t.code,{children:"startupManager"})," \u8fd9\u4e09\u4e2a\u63a2\u9488\u7684 ",(0,r.jsx)(t.code,{children:"chan"})," \u6784\u6210\u7684\u3002"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5b83\u4eec\u7684\u6838\u5fc3\u5b9e\u73b0\u5728  ",(0,r.jsx)(t.code,{children:"probeManager prober.Manager"})," \u4e0a\u3002"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://firebasestorage.googleapis.com/v0/b/notiondiagram.appspot.com/o/diagram%2Fm5smUNzLG7NDZmSPY82qhFvWnsu1%2Ff8dcda60-944c-4a62-8c8f-61fcd9f9dfcd.svg?alt=media&token=c0378f71-cc9c-4c0a-b023-86555e7fbe37",alt:"probch.png"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"probeCh"})," \u662f\u5206\u522b\u4ee3\u8868\u4e09\u4e2a  ",(0,r.jsx)(t.code,{children:"chan"})," ,\u5206\u522b\u662f ",(0,r.jsx)(t.code,{children:"livenessCh"})," ",(0,r.jsx)(t.code,{children:"readinessCh"})," ",(0,r.jsx)(t.code,{children:"startupCh"})," ,\u5728\u56fe\u4e2d\u8fdb\u884c\u4e86\u7edf\u4e00\uff0c\u4f46\u662f ",(0,r.jsx)(t.code,{children:"code"})," \u4e2d\u662f\u4e09\u4e2a\u901a\u9053\u3002"]}),"\n",(0,r.jsx)(t.h3,{id:"probemanager",children:"ProbeManager"}),"\n",(0,r.jsx)(t.p,{children:"Manager\u4f1a\u4e3a\u6bcf\u4e2a\u6307\u5b9a\u4e86\u63a2\u6d4b\u7684\u5bb9\u5668\u521b\u5efa\u4e00\u4e2a\u63a2\u6d4b\u201cworker\u201d\uff08AddPod\u65b9\u6cd5\uff09\u3002\u8fd9\u4e9bworker\u4f1a\u5b9a\u671f\u5bf9\u5176\u5206\u914d\u7684\u5bb9\u5668\u8fdb\u884c\u63a2\u6d4b\uff0c\u5e76\u5c06\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\u3002\u5f53\u9700\u8981\u66f4\u65b0Pod\u7684\u72b6\u6001\uff08PodStatus\uff09\u65f6\uff0cManager\u4f1a\u5229\u7528\u8fd9\u4e9b\u7f13\u5b58\u7684\u63a2\u6d4b\u7ed3\u679c\u6765\u8bbe\u7f6ePod\u7684Ready\u72b6\u6001\uff08UpdatePodStatus\u65b9\u6cd5\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u4e0d\u652f\u6301\u66f4\u65b0\u63a2\u6d4b\u53c2\u6570\u3002"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Manager"})," \u4f1a\u4e3a\u6bcf\u4e2a\u6307\u5b9a\u6765\u63a2\u6d4b\u7684\u5bb9\u5668\u90fd\u521b\u5efa\u4e00\u4e2a ",(0,r.jsx)(t.code,{children:"worker"}),", \u8fd9\u4e9b ",(0,r.jsx)(t.code,{children:"worker"})," \u4f1a\u5b9a\u671f\u5bf9\u5176\u5206\u914d\u7684\u5bb9\u5668\u8fdb\u884c\u63a2\u6d4b\uff0c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u66f4\u65b0 ",(0,r.jsx)(t.code,{children:"pod"})," \u72b6\u6001\u65f6\u4f1a\u5229\u7528\u8fd9\u4e9b\u53c2\u6570\u6765\u66f4\u65b0\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-protobuf",children:'type Manager interface {\n\t// AddPod creates new probe workers for every container probe. This should be called for every\n\t// pod created.\n\tAddPod(pod *v1.Pod)\n\n\t// StopLivenessAndStartup handles stopping liveness and startup probes during termination.\n\tStopLivenessAndStartup(pod *v1.Pod)\n\n\t// RemovePod handles cleaning up the removed pod state, including terminating probe workers and\n\t// deleting cached results.\n\tRemovePod(pod *v1.Pod)\n\n\t// CleanupPods handles cleaning up pods which should no longer be running.\n\t// It takes a map of "desired pods" which should not be cleaned up.\n\tCleanupPods(desiredPods map[types.UID]sets.Empty)\n\n\t// UpdatePodStatus modifies the given PodStatus with the appropriate Ready state for each\n\t// container based on container running status, cached probe results and worker states.\n\tUpdatePodStatus(*v1.Pod, *v1.PodStatus)\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["\u5728 ",(0,r.jsx)(t.code,{children:"AddPod"})," \u65b9\u6cd5\u4e2d\u5b9e\u73b0\u4e86\u904d\u5386\u6240\u6709 ",(0,r.jsx)(t.code,{children:"container"})," \uff0c\u7136\u540e\u6323\u5bf9\u914d\u7f6e\u7684\u4e0d\u540c\u63a2\u9488\uff0c\u542f\u52a8 ",(0,r.jsx)(t.code,{children:"work"}),",\u6bcf\u4e2a\u63a2\u9488\u4f7f\u7528\u4e00\u4e2a\u534f\u7a0b\u8fd0\u884c\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-protobuf",children:"func (m *manager) AddPod(pod *v1.Pod) {\n\tm.workerLock.Lock()\n\tdefer m.workerLock.Unlock()\n\n\tkey := probeKey{podUID: pod.UID}\n\tfor _, c := range append(pod.Spec.Containers, getRestartableInitContainers(pod)...) {\n\t\tkey.containerName = c.Name\n\n\t\tif c.StartupProbe != nil {\n\t\t\tkey.probeType = startup\n\t\t\tif _, ok := m.workers[key]; ok {\n\t\t\t\t\n\t\t\t\treturn\n\t\t\t}\n\t\t\tw := newWorker(m, startup, pod, c)\n\t\t\tm.workers[key] = w\n\t\t\tgo w.run()\n\t\t}\n\n\t\tif c.ReadinessProbe != nil {\n\t\t\tkey.probeType = readiness\n\t\t\tif _, ok := m.workers[key]; ok {\n\t\t\t\t\n\t\t\t\treturn\n\t\t\t}\n\t\t\tw := newWorker(m, readiness, pod, c)\n\t\t\tm.workers[key] = w\n\t\t\tgo w.run()\n\t\t}\n\n\t\tif c.LivenessProbe != nil {\n\t\t\tkey.probeType = liveness\n\t\t\tif _, ok := m.workers[key]; ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tw := newWorker(m, liveness, pod, c)\n\t\t\tm.workers[key] = w\n\t\t\tgo w.run()\n\t\t}\n\t}\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u5f80\u4e0b\u5c31\u662f\u6839\u636e\u914d\u7f6e\u7684\u63a2\u9488\u7c7b\u578b\u8c03\u7528\u63a2\u6d4b\u903b\u8f91\uff1a"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-protobuf",children:'func (pb *prober) runProbe(ctx context.Context, probeType probeType, p *v1.Probe, pod *v1.Pod, status v1.PodStatus, container v1.Container, containerID kubecontainer.ContainerID) (probe.Result, string, error) {\n\tswitch {\n\tcase p.Exec != nil:\n\t\tcommand := kubecontainer.ExpandContainerCommandOnlyStatic(p.Exec.Command, container.Env)\n\t\treturn pb.exec.Probe(pb.newExecInContainer(ctx, container, containerID, command, timeout))\n\n\tcase p.HTTPGet != nil:\n\t\treq, err := httpprobe.NewRequestForHTTPGetAction(p.HTTPGet, &container, status.PodIP, "probe")\n\t\treturn pb.http.Probe(req, timeout)\n\n\tcase p.TCPSocket != nil:\n\t\tport, err := probe.ResolveContainerPort(p.TCPSocket.Port, &container)\n\t\treturn pb.tcp.Probe(host, port, timeout)\n\n\tcase p.GRPC != nil:\n\t\thost := status.PodIP\n\t\treturn pb.grpc.Probe(host, service, int(p.GRPC.Port), timeout)\n\tdefault:\n\t\tklog.InfoS("Failed to find probe builder for container", "containerName", container.Name)\n\t\treturn probe.Unknown, "", fmt.Errorf("missing probe handler for %s:%s", format.Pod(pod), container.Name)\n\t}\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"livenessmanagerreadinessmanagerstartupmanager",children:"livenessManager\u3001readinessManager\u3001startupManager"}),"\n",(0,r.jsxs)(t.p,{children:["\u8fd9\u4e09\u4e2a\u63a2\u9488\u7684 ",(0,r.jsx)(t.code,{children:"result"})," \u90fd\u662f\u4ece ",(0,r.jsx)(t.code,{children:"prober.Manager"})," \u4e2d\u5199\u5165\u7684\uff0c\u53ea\u662f\u6bcf\u4e2a\u63a2\u9488\u6709\u4e00\u4e2a ",(0,r.jsx)(t.code,{children:"chan"})," , ",(0,r.jsx)(t.code,{children:"syncLoopIteration"})," \u63a5\u6536\u5230\u5c31\u662f\u6267\u884c ",(0,r.jsx)(t.code,{children:"handler.HandlePodSyncs"})," \u64cd\u4f5c\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-protobuf",children:'func (kl *Kubelet) syncLoopIteration(ctx context.Context, configCh <-chan kubetypes.PodUpdate, handler SyncHandler,\n\tsyncCh <-chan time.Time, housekeepingCh <-chan time.Time, plegCh <-chan *pleg.PodLifecycleEvent) bool {\n\tselect {\n\tcase update := <-kl.livenessManager.Updates():\n\t\tif update.Result == proberesults.Failure {\n\t\t\thandleProbeSync(kl, update, handler, "liveness", "unhealthy")\n\t\t}\n\tcase update := <-kl.readinessManager.Updates():\n\t\tready := update.Result == proberesults.Success\n\t\tkl.statusManager.SetContainerReadiness(update.PodUID, update.ContainerID, ready)\n\n\t\tstatus := ""\n\t\tif ready {\n\t\t\tstatus = "ready"\n\t\t}\n\t\thandleProbeSync(kl, update, handler, "readiness", status)\n\tcase update := <-kl.startupManager.Updates():\n\t\tstarted := update.Result == proberesults.Success\n\t\tkl.statusManager.SetContainerStartup(update.PodUID, update.ContainerID, started)\n\n\t\tstatus := "unhealthy"\n\t\tif started {\n\t\t\tstatus = "started"\n\t\t}\n\t\thandleProbeSync(kl, update, handler, "startup", status)\n\t}\n\treturn true\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var r=n(6540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);