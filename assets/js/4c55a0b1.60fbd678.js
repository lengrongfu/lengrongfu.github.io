"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[1214],{3926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var r=t(4848),o=t(8453);const s={slug:"shard-queue",title:"controller-runtime \u5b9e\u73b0\u5206\u533a WorkQueue",authors:["rongfu"],tags:["Kubernetes"]},i=void 0,u={permalink:"/blog/shard-queue",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-14-shard-queue.md",source:"@site/blog/2025-01-14-shard-queue.md",title:"controller-runtime \u5b9e\u73b0\u5206\u533a WorkQueue",description:"\u76ee\u524d\u7edf\u4e00\u5728 client-go \u4e2d\u5b9e\u73b0\u4e86\u4e09\u4e2a Work Queue\u3002\u5305\u62ec\u901a\u7528\u961f\u5217\u3001\u9650\u901f\u961f\u5217\u3001\u5ef6\u65f6\u961f\u5217\u3002\u6e90\u7801\u7edf\u4e00\u90fd\u5728 staging/src/k8s.io/client-go \u5305\u4e0b\u9762\u3002",date:"2025-01-14T00:00:00.000Z",tags:[{inline:!1,label:"Kubernetes",permalink:"/blog/tags/kubernetes",description:"kubernetes"}],readingTime:4.73,hasTruncateMarker:!0,authors:[{name:"Leng",title:"Softwore Developer",url:"https://github.com/lengrongfu",image_hrl:"https://avatars.githubusercontent.com/u/15009201?v=4",socials:{github:"https://github.com/lengrongfu"},key:"rongfu",page:null}],frontMatter:{slug:"shard-queue",title:"controller-runtime \u5b9e\u73b0\u5206\u533a WorkQueue",authors:["rongfu"],tags:["Kubernetes"]},unlisted:!1,nextItem:{title:"\u628a\u5c0f\u7231\u97f3\u7bb1\u63a5\u5165\u5927\u8bed\u8a00\u6a21\u578b",permalink:"/blog/migpu"}},a={authorsImageUrls:[void 0]},d=[{value:"\u8bbe\u8ba1",id:"\u8bbe\u8ba1",level:3},{value:"HashFn",id:"hashfn",level:3},{value:"Get \u65b9\u6cd5",id:"get-\u65b9\u6cd5",level:3},{value:"Add",id:"add",level:3}];function c(e){const n={code:"code",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\u76ee\u524d\u7edf\u4e00\u5728 client-go \u4e2d\u5b9e\u73b0\u4e86\u4e09\u4e2a Work Queue\u3002\u5305\u62ec\u901a\u7528\u961f\u5217\u3001\u9650\u901f\u961f\u5217\u3001\u5ef6\u65f6\u961f\u5217\u3002\u6e90\u7801\u7edf\u4e00\u90fd\u5728 staging/src/k8s.io/client-go \u5305\u4e0b\u9762\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u6700\u8fd1\u9047\u5230\u4e00\u4e2a\u9700\u6c42\uff0c\u5373\u5e0c\u671b\u80fd\u5e76\u53d1\u534f\u8c03\u8d44\u6e90\uff0c\u53c8\u5e0c\u671b\u4e00\u7ec4\u76f8\u5173\u7684\u8d44\u6e90\u5728\u4e00\u4e2a\u534f\u7a0b\u91cc\u9762\u5904\u7406\uff1b\u8fd9\u5c31\u6709\u70b9\u7c7b\u4f3c\u4e8e Kafka \u4e2d\u7684\u5206\u533a\u961f\u5217\uff1b\u65e2\u53ef\u4ee5\u5e76\u53d1\u53c8\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u7ec4\u8d44\u6e90\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u4e32\u884c\u5904\u7406\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u7684\u6848\u4f8b\u662f\u56e0\u4e3a\u6211\u9700\u8981\u8ba1\u7b97\u8282\u70b9\u7ef4\u5ea6\u7684\u8d44\u6e90\uff0c\u4f46\u662f\u8d44\u6e90\u90fd\u662f\u901a\u8fc7Pod\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4fdd\u8bc1\u540c\u4e00\u4e2a Node \u7684\u8d44\u6e90\u5728\u4e00\u4e2a\u534f\u7a0b\u5185\u8fdb\u884c\u8ba1\u7b97\uff0c\u5426\u5219\u5e76\u53d1\u4f1a\u8f83\u96be\u5904\u7406\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u8bbe\u8ba1",children:"\u8bbe\u8ba1"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u901a\u8fc7\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a Shard Queue\uff0c\u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u903b\u8f91\uff0c\u6bcf\u4e2a Pod \u5728\u8fdb\u5165 Queue \u4e4b\u524d\u901a\u8fc7\u8ba1\u7b97\u4e00\u4e2a Hash \u503c\u6765\u51b3\u5b9a\u9700\u8981\u653e\u5165\u90a3\u4e2a\u5b50\u961f\u5217\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://new-notion-1315843248.cos.ap-guangzhou.myqcloud.com/wechat/609acece-b32f-45b7-b624-0fba932f7dec.jpg?imageMogr2/format/webp",alt:"loading"})}),"\n",(0,r.jsx)(n.p,{children:"\u6838\u5fc3\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff0c"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u4e3b\u8981\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9650\u901f\u961f\u5217 shards \u6570\u7ec4\uff0c\u901a\u8fc7\u8ba1\u7b97\u51fa\u7684 Hash \u503c\u5bf9\u5e76\u53d1\u6570\u8fdb\u884c\u6c42\u4f59\u5f97\u51fa\u5177\u4f53\u5e94\u8be5\u5728\u90a3\u4e2a\u961f\u5217\u3002"}),"\n",(0,r.jsx)(n.li,{children:"HashFn \u5c31\u662f\u901a\u8fc7\u8bf7\u6c42\u53c2\u6570 reconcile.Request \u548c \u5206\u533a\u6570\u91cf\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f97\u51fa\u4e00\u4e2a hash \u503c\u3002"}),"\n",(0,r.jsx)(n.li,{children:"CurrentShard \u662f\u7528\u6765\u8bb0\u5f55\u5206\u914d\u534f\u7a0b\u5230\u5206\u7247ID\u7684\u6700\u65b0\u4fe1\u606f\u3002"}),"\n",(0,r.jsx)(n.li,{children:"GoroutineSharding \u662f\u7528\u6765\u8bb0\u5f55 goroutineID \u548c\u5206\u7247 ID\u7684\u6620\u5c04\u5173\u7cfb\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"type CacheKey[T reconcile.Request] func(T reconcile.Request, shardCount int) int\n\ntype TypedShardedQueueConfig[T reconcile.Request] struct {\n\t// Name for the queue. If unnamed, the metrics will not be registered.\n\tName string\n\t// shards is queue arrau\n\tshards []workqueue.TypedRateLimitingInterface[reconcile.Request]\n\t// CacheKey is get key hash value\n\tHashFn CacheKey[reconcile.Request]\n\t// CurrentShard is record current goroutineID assign shard\n\tCurrentShard int\n\t// GoroutineSharding is record goroutineID map to shard index\n\tGoroutineSharding map[int64]int\n\t//\n\tshardCount int\n\t// mu is lock\n\tmu sync.RWMutex\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u5148\u770b\u4e4b\u524d\u7684\u9650\u901f\u961f\u5217\u662f\u5982\u4f55\u5b9e\u73b0\u5e76\u53d1\u7684\uff0c\u5728\u4e4b\u524d\u53ea\u6709\u4e00\u4e2a Work Queue\uff0c\u7136\u540e\u5982\u679c\u8bbe\u7f6e\u4e86\u5e76\u53d1\uff0c\u4f1a\u542f\u52a8\u591a\u4e2a\u534f\u7a0b\uff0c\u5b89\u5168\u7684\u4ece Work Queue \u4e2d\u53d6\u51fa\u5143\u7d20\uff0c\u6240\u4ee5\u534f\u7a0b Get \u7684\u65f6\u5019\u662f\u6ca1\u529e\u6cd5\u548c\u5206\u533a\u961f\u5217\u5bf9\u5e94\u4e0a\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://new-notion-1315843248.cos.ap-guangzhou.myqcloud.com/wechat/51c664c4-404a-41b3-b6c7-d86db85902e3.jpg?imageMogr2/format/webp",alt:"loading"})}),"\n",(0,r.jsx)(n.h3,{id:"hashfn",children:"HashFn"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u662f\u7528\u6237\u9700\u8981\u5b9e\u73b0\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u8d44\u6e90\u53ef\u80fd\u8ba1\u7b97 Hash \u7684\u903b\u8f91\u4e0d\u4e00\u6837\uff0c\u6211\u8fd9\u91cc\u4ee5 Pod \u4e3a\u4f8b\u3002\u6838\u5fc3\u662f\u5728\u51fd\u6570\u5185\u90e8\u9700\u8981\u4f7f\u7528 Client \u8fdb\u884c Get \u83b7\u53d6\u5b8c\u6574\u7684\u8d44\u6e90\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'func (r *CustomController) Hash(value reconcile.Request, shardCount int) int {\n\tvar pod corev1.Pod\n\tif err := r.Client.Get(context.Background(), client.ObjectKey{Namespace: value.Namespace, Name: value.Name}, &pod); err != nil {\n\t\treturn 0\n\t}\n\tif pod.Spec.NodeName == "" {\n\t\treturn 0\n\t}\n\th := fnv.New32a()\n\th.Write([]byte(pod.Spec.NodeName))\n\tif shardCount > 0 {\n\t\treturn int(h.Sum32() % uint32(shardCount))\n\t}\n\treturn 0\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u90a3\u6211\u4eec\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c Get\uff0c\u5e76\u83b7\u53d6\u5230\u5b8c\u6574\u7684 Object \u5462\uff0c\u6838\u5fc3\u539f\u7406\u5c31\u5728 client-go \u7684\u6d41\u7a0b\u91cc\u9762\uff1b\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7b2c5\u6b65\u5c31\u628a\u5bf9\u8c61\u653e\u5165\u5230 Store \u4e2d\u4e86\uff0c\u5728\u7b2c7\u6b65\u4e2d\u624d\u662f\u8fdb\u884c Work Queue \u64cd\u4f5c\uff1b\u6240\u4ee5\u5728\u8fd9\u91cc\u5df2\u7ecf\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u8c61\u4e86\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://new-notion-1315843248.cos.ap-guangzhou.myqcloud.com/wechat/0b2e150d-896d-4d88-8809-75f65099ba05.jpg?imageMogr2/format/webp",alt:"loading"})}),"\n",(0,r.jsx)(n.h3,{id:"get-\u65b9\u6cd5",children:"Get \u65b9\u6cd5"}),"\n",(0,r.jsx)(n.p,{children:"\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u7b2c\u4e00\u4e2a\u534f\u7a0b\u8c03\u7528 Get \u7684\u65f6\u5019\uff0c\u770b GoroutineSharding \u7ed3\u6784\u4e2d\u662f\u5426\u4fdd\u5b58\u4e86\u5f53\u524d GoroutineID \u5bf9\u5e94\u7684 Shard Index\uff0c\u5982\u679c\u6ca1\u6709\u5219\u5b58\u50a8\uff0c\u5982\u679c\u6709\u5219\u76f4\u63a5\u4f7f\u7528\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u628a\u961f\u53cb\u534f\u7a0b\u7ed1\u5b9a\u5230\u961f\u53cb\u7684\u5206\u7247\u4e0a\u4e86\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'func (sq *TypedShardedQueueConfig[T]) Get() (T, bool) {\n\tgoroutineID := GetGoroutineID()\n\tif goroutineID == -1 {\n\t\tpanic("goroutine ID is invelida")\n\t}\n\tvar zero T\n\tsq.mu.RLock()\n\tif shads, ok := sq.GoroutineSharding[goroutineID]; ok {\n\t\tsq.mu.RUnlock()\n\t\tif item, shutdown := sq.shards[shads].Get(); !shutdown {\n\t\t\treturn T(item), shutdown\n\t\t}\n\t\treturn zero, true\n\t}\n\tsq.mu.RUnlock()\n\n\tsq.mu.Lock()\n\tsq.GoroutineSharding[goroutineID] = sq.CurrentShard\n\tsq.CurrentShard += 1\n\tsq.mu.Unlock()\n\n\tsq.mu.RLock()\n\tif shads, ok := sq.GoroutineSharding[goroutineID]; ok {\n\t\tsq.mu.RUnlock()\n\t\tif item, shutdown := sq.shards[shads].Get(); !shutdown {\n\t\t\treturn T(item), shutdown\n\t\t}\n\t\treturn zero, true\n\t}\n\treturn zero, true\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"add",children:"Add"}),"\n",(0,r.jsx)(n.p,{children:"\u6dfb\u52a0\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u901a\u8fc7 HashFn \u8ba1\u7b97\u51fa\u961f\u53cb\u7684\u5206\u533a index\uff0c\u7136\u540e\u628a\u5143\u7d20 item \u653e\u5165\u5230\u5bf9\u5e94\u5230\u5b50 Work queue \u4e2d\u5373\u53ef\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'func (sq *TypedShardedQueueConfig[T]) Add(item T) {\n\thashKey := sq.HashFn(reconcile.Request(item), sq.shardCount)\n\tklog.V(5).InfoS("Add", "hashKey", hashKey)\n\tsq.shards[hashKey].Add(reconcile.Request(item))\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u5b83\u7684\u65b9\u6cd5\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u4ecb\u7ecd\u4e86\uff0c\u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u67e5\u770b GitHub\uff1aundefined"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>u});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);