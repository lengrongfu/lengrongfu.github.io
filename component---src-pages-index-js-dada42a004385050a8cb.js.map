{"version":3,"file":"component---src-pages-index-js-dada42a004385050a8cb.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nconst ListLink = props => (\n  <li style={{ display: `inline-block`, marginRight: `1rem` }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\n          <h3 style={{ display: `inline` }}>{title}</h3>\n        </Link>\n        <ul style={{ listStyle: `none`, float: `right` }}>\n          <ListLink to=\"/\">Home</ListLink>\n          <ListLink to=\"/about/\">About</ListLink>\n          <ListLink to=\"/tags\">Tags</ListLink>\n          <ListLink to=\"/contact/\">Contact</ListLink>\n          <ListLink to=\"/books\">Books </ListLink>\n        </ul>\n      </header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","ListLink","props","style","display","marginRight","Link","to","children","location","title","isRootPath","pathname","textShadow","backgroundImage","listStyle","float","Date","getFullYear","href","Seo","description","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps","siteTitle","posts","allMarkdownRemark","nodes","length","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}